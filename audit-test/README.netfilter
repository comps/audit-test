About netfilter/netfilebt tests
-------------------------------

The netfilter tests reside in the sub-directories netfilter and netfilebt of
the audit-test suite. The tests of the iptables and ip6tables reside in
netfilter, and the bridge table filtering tests are in netfilebt. The use
of remote network server running the lblnet_tst_server is required for these
tests.

The iptables and ip6tables tests have a large number of the tests that run
over the local loopback device to a locally running lblnet_tst_server
process.  Some of the tests for iptables and ip6tables are run over the
primary Ethernet device against the remote server executing the
lblnet_tst_server process.  The lblnet_tst_server on both systems is
launched from xinetd.

The lblnet_tst_server is configured on the TOE during the 'make netconfig'
procedure described in the README.run file.  Refer to the README.netwk_svr
for instructions on how to setup the network test server.

Network configuration
---------------------

To run the netfilter tests you need to configure two separate networks between
TOE and network test server (referred to as the netserver or NS in this
documentation). The networks are referred as primary and secondary network
in this document.

The secondary network is required only by the ebtables tests which also
require the creation of a bridge (logical) device on the TOE to which
the secondary network's Ethernet (physical) device on this machine
is enslaved. Please note that the both IPv4 and IPv6 needs to be properly
configured on the devices.

A working network configuration with examples of simple IPv4/IPv6 addresses
is shown on the picture below. Please note that the interfaces can be connected
directly via a cross-cable or connected to the same LAN via Ethernet switches.
Also note that while the primary and secondary networks can be on the same
physical network, they must be on separate IPv4/IPv6 subnets.

Please be aware that some network cards may be renamed by udev from the
"traditional" eth* network interface name to em* or also some other. The em*
renaming will be the default in RHEL7 for all network interfaces.


                                +~~~~~~~~~~~+
                                |  primary  |
                                |  network  |
                                +~~~~~~~~~~~+
         +----------------+    /             \    +----------------+
         | TOE |          |   /               \   |           | NS |
         |-----+          |  /                 \  |           +----|
         |           eth3 |>>   NOTE:           <<| eth0           |
         |  IPv4 10.0.0.2 |     Device eth4       | IPv4 10.0.0.1  |
         |  IPv6  fd00::2 |     is enslaved       | IPv6 fd00::1   |
         |                |     to bridge toebr   |                |
         |                |     on machine TOE    |                |
         |   toebr (eth4) |>>                   <<| eth1           |
         | IPv4  10.0.1.2 |  \                 /  | IPv4 10.0.1.1  |
         | IPv6 fd00:1::2 |   \               /   | IPv6 fd00:1::1 |
         |                |    \             /    |                |
         +----------------+     +~~~~~~~~~~~+     +----------------+
                                | secondary |
                                |  network  |
                                +-----------+


Please see section "Procedures for configuration" about details how to set
up the network configuration.

Important note:
IPv6 addresses must have global scope for the tests to work.


Testing strategy
----------------

The strategy of the testing is to provide a known and preferable empty
chain in the tables prior to the start of the testing. Then a test message is
run through the appropriate chain of the tables showing that it is not
blocking or filtering on the test message. The rule is applied with the
appropriate filter information and the test message is run through again.

The result is checked for the expected result of either the dropping,
acceptance, or rejection of the test message. Often the dropping of a message
is verified through the timeout of a listen for the message or the timeout
of a connect request. It is usually verified again via the action parameter
for the message type NETFILTER in the audit log which is rotated before
the start of each test. In the case of a chain policy drop rule the listen
or connect timeout must suffice. This is because the only way to audit a
dropped message is to insert a rule with a target of AUDIT_DROP, however
by inserting such a rule it would not verify that the drop is caused by the
policy change as opposed to the rule inserted to audit the drop.


Environmental variables
-----------------------

There are a number of environmental variables required in order to provide
the information needed to set the rules in iptables, ip6tables and ebtables.
Some of these environmental variables are also required by the network
tests in the audit-test/network directory. These environmental variables
must be set manually prior to running the tests, see README.run.

Below is a list of the environmental variables required to run all the tests
as well as an explanation of what they are.

Variable		Description
--------		--------------------------------------------------
MODE           		Usually 64 but could be 32 if the TOE is running
			a 32-bit OS

PPROFILE       		"capp" if the TOE is configured in 'base' mode or
			"lspp" if the TOE is configured in 'mls' mode

PASSWD         		The root/eal password for the TOE

LOCAL_DEV      		Device for the TOE primary network, such as "eth3"

LOCAL_SEC_DEV  		Device for the TOE secondary network, such as "eth4"

LOCAL_SEC_MAC  		MAC address of the secondary network device on the TOE

LOCAL_IPV4     		IPv4 address for primary network on TOE

LOCAL_IPV6     		IPv6 address for primary network on TOE

LOCAL_SEC_IPV4 		IPv4 address for secondary network on TOE

LOCAL_SEC_IPV6 		IPv6 address for secondary network on TOE

LBLNET_SVR_IPV4 	IPv4 address for the primary network on the NS

LBLNET_SVR_IPV6		IPv6 address for the primary device on the NS

SECNET_SVR_IPV4 	IPv4 address for secondary network on NS

SECNET_SVR_IPV6 	IPv6 address of secondary network on NS

SECNET_SVR_MAC  	MAC address of the secondary device on the NS

BRIDGE_FILTER   	Name of the bridge created on TOE for the ebtables
			testing, such as "toebr".  This bridge should have
			the LOCAL_SEC_DEV device enslaved to it.


Example of all needed environment variables for TOE
---------------------------------------------------

Example of all environment variables for TOE according to the configuration
shown in the "Network configuration" section. Please note these are a superset
of all configuration environment variables you need to successfully run
the all tests in the suite. Also be aware you need to adjust correctly
according to your configuration:

export MODE=64
export PPROFILE=lspp
export PASSWD="redhat"
export LOCAL_DEV="eth3"
export LOCAL_SEC_DEV="eth4"
export LOCAL_SEC_MAC="78:2B:CB:4B:EB:BC"
export LOCAL_IPV4="10.0.0.2"
export LOCAL_IPV6="fd00::2"
export LOCAL_SEC_IPV4="10.0.1.2"
export LOCAL_SEC_IPV6="fd00:1::2"
export LBLNET_SVR_IPV4="10.0.0.1"
export LBLNET_SVR_IPV6="fd00::1"
export SECNET_SVR_IPV4="10.0.1.1"
export SECNET_SVR_IPV6="fd00:1::1"
export SECNET_SVR_MAC="00:04:23:B3:B5:83"
export BRIDGE_FILTER="toebr"


ifcfg configuration
-------------------

This section lists the required ifcfg network configuration files on RHEL based
systems that are needed to configure the network interfaces on TOE and NS
according to the picture shown in section "Network configuration".

=== TOE network interfaces configuration ===

# cat /etc/sysconfig/network-scripts/ifcfg-eth3
DEVICE="eth3"
HWADDR="01:12:44:FE:A7:18"
ONBOOT="yes"
BOOTPROTO="static"
IPADDR="10.0.0.2"
NETMASK="255.255.255.0"
IPV6INIT="yes"
IPV6ADDR=fd00::2
TYPE="Ethernet"

# cat /etc/sysconfig/network-scripts/ifcfg-eth4
DEVICE="eth4"
HWADDR="D8:D3:85:81:BE:04"
ONBOOT="yes"
TYPE="Ethernet"
BRIDGE=toebr

# cat /etc/sysconfig/network-scripts/ifcfg-toebr
DEVICE="toebr"
TYPE=bridge
BOOTPROTO="static"
IPADDR="10.0.1.2"
NETMASK="255.255.255.0"
IPV6INIT="yes"
IPV6ADDR=fd00:1::2

=== NS network interfaces configuration ===

# cat /etc/sysconfig/network-scripts/ifcfg-eth0
DEVICE="eth0"
HWADDR="0F:14:15:B8:A0:77"
ONBOOT="yes"
BOOTPROTO="static"
IPADDR="10.0.0.1"
NETMASK="255.255.255.0"
IPV6INIT="yes"
IPV6ADDR=fd00::1
TYPE="Ethernet"

# cat /etc/sysconfig/network-scripts/ifcfg-eth1
DEVICE="eth1"
HWADDR="00:04:23:B3:B5:83"
ONBOOT="yes"
BOOTPROTO="static"
IPADDR="10.0.1.1"
NETMASK="255.255.255.0"
IPV6INIT="yes"
IPV6ADDR=fd00:1::1
TYPE="Ethernet"

For details on configuring the network interfaces in general refer to:
https://docs.redhat.com/docs/en-US/Red_Hat_Enterprise_Linux/6/html/Deployment_Guide/s1-networkscripts-interfaces.html

Please note that in the examples above, all interfaces are configured via static
network address assignment. You may use also DHCP for configuring your devices
but static addresses are best of the DHCP addresses aren't persistent or
don't provide the subnet separation required by the tests.

If DHCP addresses are used and are not persistent, the LBLNET and SECNET
variables must be updated each time an address on the NS changes, and
the LOCAL variables must be updated if an address on the TOE changes.
A change to either server will require re-running 'make netconfig'
on the TOE and re-running the NS setup procedure described in README.netwk_svr.

After configuring the interfaces you need to restart the networking for the
changes to take effect.

On a CAPP machine, perform the following:

# service network restart

On an LSPP machine, perform:

# run_init service network restart

After restarting the network on the TOE and NS, verify the
configuration by examining the results of 'ifconfig' on each
system.  On the TOE, verify the bridge configuration with the
'brctl show' command.

Setting the aging timer to a high value is helpful to the testing as
it prevents the learned mac addresses in the bridge's forwarding database
from being deleted when it hasn't seen a frame from that mac address in the
timer number of seconds.  The following command is recommended.

# brctl setageing <bridge name> 3600

This command can be placed in /etc/rc.local to be run automatically
upon each boot.
