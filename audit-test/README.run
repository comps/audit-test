| Quickstart
+-----------

Few definitions
---------------

TOE (Target of Evaluation) - the primary testing machine running this suite
NS (Network Server) - separate helper machine reachable over network from TOE,
                      used for network-related testing, doesn't itself run tests

The following steps should be performed on both, until the steps prompt you to
stop (in case of the NS). The TOE can be installed in "Base" (capp) or "MLS"
(lspp) profile while the NS must always be installed only in "MLS" (lspp).

Obtaining this test suite
-------------------------

If you're reading this from a local text file, you probably already have this
suite. If not, there are multiple ways to get and distribute it.

The primary way is using git-clone:

# git clone git://audit-test.git.sourceforge.net/gitroot/audit-test/audit-test audit-test.git

alternatively, if you already have the test suite and want to re-distribute
it without git, you can do so using your favorite archiving tool, or simply

# cd audit-test.git
# make dist

which creates audit-test.tar.gz with correct mode/ownership for you.

Configure testing users
-----------------------

The suite needs to be run as root, with the root privilege gained over 'su'
from a different administrative user. If you don't already have such admin user
on the system, you need to add one:

# useradd -c "EAL Test User" -G wheel eal
# passwd eal

If on an MLS system perform the following additional step:
# semanage login -a -s staff_u -r s0-s15:c0.c1023 eal

Configure additional system requirements
----------------------------------------

== xattrs ==
The filesystems used for standard file hierarchy need to support extended
attributes (ie. SELinux contexts) and ACLs. Some filesystems (XFS) have both
built in, some others (ext4) need them to be explicitly enabled.

For ext4, make sure 'user_xattr,acl' is either in the fs metadata as default
mount options or in /etc/fstab and that the fs superblock itself has support
for them (as "features").

== network optimization ==
Optionally, to speed up testing, you can make TCP connections give up (timeout)
sooner by using:

# echo "net.ipv4.tcp_syn_retries = 2" >> /etc/sysctl.conf
# sysctl -p

if ie. both TOE and NS are on a low-latency local network.

Install the audit-test suite
----------------------------

Log in as the administrative user.

If running on an MLS system, change your role to "sysadm_r".
# newrole -r sysadm_r

Change to root.
# /bin/su -

Download or extract the suite under /usr/local/eal4_testing,
# git clone <url> /usr/local/eal4_testing
or
# mkdir /usr/local/eal4_testing
# tar -xvf audit-test.tar.gz -C /usr/local/eal4_testing

Verify that /usr/local/eal4_testing contains the 'audit-test' and 'ltp'
subdirectories.

Preparing the suite
-------------------

To fix bad ownership, file mode, selinux contexts and otherwise do general
post-extraction tasks and prepare the suite for build, issue:

# cd /usr/local/eal4_testing
# make prepare

Install package requirements / dependencies
-------------------------------------------

The suite has various additional RPM dependencies that need to be installed
on the system. You can list these using

# cd /usr/local/eal4_testing/audit-test
# make deplist

and you can see just the missing ones with

# make depmissing

Assuming you have yum repositories / channels set up correctly, you can
automatically install all required dependencies (excluding those that
have to be downloaded separately, like perl-Expect) by using something like

# yum install $(make depmissing)

The perl-IO-Tty package is available for RHEL7 in the optional channel that
is not available on the installation media. You should be able to download
it via RHN.

The perl-Expect is available via EPEL (Extra Packages for Enterprise Linux).
You can install it after adding the EPEL repository:
http://fedoraproject.org/wiki/EPEL#How_can_I_use_these_extra_packages.3F
or download it directly from the koji build system:
http://koji.fedoraproject.org/koji/packageinfo?packageID=2922

For tips on installing the test suite on other distros,
refer to the notes at the end of this README.

Building and loading the selinux policy
---------------------------------------

If running on an LSPP/MLS system, install the test policy and change to the
"lspp_test_r" role. Please note that the policy make will require root
password to be able to load the policy. This is because sysadm_r and secadm_r
roles are separated in the evaluated configuration.

# cd /usr/local/eal4_testing/audit-test
# make policy
# newrole -r lspp_test_r

Configure testing helper servers
--------------------------------

If you're setting up a NS, perform

# cd /usr/local/eal4_testing/audit-test
# make ns_install

and stop following this README - your NS is now ready for use.

If you're setting up an IPA server, consult README.ipa and stop following
this README.

*** The steps below are only applicable for a TOE! ***

Build the audit-test suite
--------------------------

To build the tests, issue

# cd /usr/local/eal4_testing
# make

Or if re-building the tests to run the 32-bit tests on an x86_64 system do:

# make clean    # or make distclean to remove all previous test logs
# make MODE=32

Set entropy generation
----------------------

The system in evaluated configuration uses SSHD and SSSD daemons configured
with /dev/random as pseudorandom number generator. This device is blocking.
On low entropy systems this might cause timeouts while logging in.

It is advised for testing to use rngd to generate enough entropy in the system.
To seed /dev/random from non-blocking /dev/urandom use this command:

# rngd -r /dev/urandom

Point the suite to the NS
-------------------------

In order for the (various pieces of) suite to be able to use the NS, it needs
to know where it is. Export either the hostname or IPv4/IPv6 addresses:

# export LBLNET_SVR=my-ns-server.domain.com
or
# export LBLNET_SVR_IPV4=1.2.3.4
# export LBLNET_SVR_IPV6=2001:db8::1

Export the PASSWD variable
--------------------------

Several tests require the knowledge of the administrative user password
and further require it to be the same as the root password.

# export PASSWD=<root/admin user password>

Configure the IPA/SSSD tests
----------------------------

On the TOE export the FQDN of the authentication server (ipa.cctest.com in
this example):

# export IPA_SERVER=ipa.cctest.com

Also export the FQDN of TOE that was used in ipa_clients file. This
record needs to match with the one specified here for things to work. The
record is used to identify the keytab for the host. In the example below
the FQDN toe1.cctest.com was used in ipa_clients file on the authentication
server.

# export IPA_SERVER_TOE_ID=toe1.cctest.com

To configure sssd run the 'sssd-configure' Makefile target in audit-test root
directory.

# cd /usr/local/eal4_testing/audit-test
# make sssd-configure

To verify the sssd configuration run the 'sssd-verify' Makefile target in
the audit-test root directory. If configuration is successful you should see
PASSED in the output as shown below.

# make sssd-verify
:: Verifying SSSD configuration
:: SSSD configuration verification PASSED

The configuration is done via the 'utils/auth-server/sssd_setup' script. You
can use the 'sssd-reconfigure' target to reconfigure sssd anytime.

# make sssd-reconfigure

Please note that sssd is disabled on the system by default. To start sssd
daemon you can use the 'sssd-start' Makefile target or start sssd via
service or systemctl commands. Similarly, you can use the 'sssd-stop' target
to stop the daemon.

Configure the KVM tests
-----------------------

For the KVM tests to run you need to have RHEL6 or RHEL7 iso image or DVD
installation media handy. You also need to tell the tests where to search
for the installation sources by modifying the config.bash file in the kvm
subfolder.

If you are using an iso installation image, please make sure it is accessible
by the qemu user.  For example, /var/lib/libvirt may be used.

Edit the file
'/usr/local/eal4_testing/audit-test/kvm/config.bash'
and set the variable 'install_media' to the path of the device of your optical
drive or the iso image file.

Configure the KVM iommu tests
-----------------------------

Note: All PCI PT tests are disabled for RHEL7 - please skip PCI device
configuration

Edit the file
'/usr/local/eal4_testing/audit-test/kvm-iommu/pci_device.conf'
and select a PCI device to use for PCI passthrough testing.

Edit the file
'/usr/local/eal4_testing/audit-test/kvm-iommu/usb_device.conf'
and select a USB device to use for USB passthrough testing.

Note: The following network hardware was used for successful execution of
kvm-iommu PCI passthrough tests:

* NetXtreme BCM5720 Gigabit Ethernet PCIe (card) / tg3 (PCI device)
* NetXtreme II BCM5706 Gigabit Ethernet / bnx2
* Intel 82576 Gigabit Network Connection / igb

Note: All devices on the bus with the tested PCI device should NOT be
used by the host. The PCI tests will try to detach all other devices
on the bus when using multifunction PCI device for testing.

Install the test suite
----------------------

Perform

# cd /usr/local/eal4_testing
# make install

to install various pieces of the test suite into the system.

Prepare to run the tests
------------------------

Log in as the administrative user, using ssh.

The audit tests require you to login as a non-root user in order to verify the
login UID in the audit records.  Some tests will fail if run from the system
console.

If running on an MLS system, change your role to "lspp_test_r".

# newrole -r lspp_test_r

Change to root.

# /bin/su -

Now (since you are in a new terminal session), export the same variables
as described in sections above.

Verify that the time on the test system is synchronized with the time
on the network test server, either manually or using ntpdate/ntpd.

As an additional sanity check, you can run:

# cd /usr/local/eal4_testing/audit-test
# make envcheck

Run the tests
-------------

The tests should be run from the top level eal4_testing directory,
recursing into subdirectories:

# cd /usr/local/eal4_testing

However, you can 'cd' into one of the subdirectories (audit-test
or ltp) directly if you want to run only tests from that directory.
You can also 'cd' further into individual audit-test bucket directories
to run only specific test buckets (syscalls, etc.).

In any case, execute:

# make run

If the test suite was built in 32-bit mode on a 64-bit platform, use
the MODE=32 option when running the tests.

# make MODE=32 run

Note: The tests must be run from an interactive terminal; running the tests as
a background task does not work, and will result in spurious test case failures.

To run only tests that were not run, failed or for some other reason didn't
PASS, you can use "rerun" instead of another "run":

# make rerun

Notes for FIPS enabled machines:
1) When testing in FIPS mode all tests that use ipsec are expected to FAIL.
To be more precise, these should be all the network/ipsec, crypto/ipsec and the
ip_xfrm tests from trustedprograms.
2) Aide has known issues with FIPS and should be disabled in trustedprograms
run.conf. For details see https://bugzilla.redhat.com/show_bug.cgi?id=574770

Run individual tests
--------------------

You can use run.bash to run a set of tests or a single test case. This must be
done in a test sub-directory. Before running individual tests please do
all the preparation steps described earlier in this file.

To run all variations of a given testcase, e.g. to run all the ptrace() tests:
# ./run.bash ptrace

To rerun all failed/errored/not executed tests:
# ./run.bash -r

To list all testcases:
# ./run.bash --list

To list all testcases that needs to be rerun:
# ./run.bash --list -r

To run a single testcase by number:
# ./run.bash <number>

To run multiple testcases by numbers:
# ./run.bash <number1> <number2> ...

Run manual tests
----------------

To run manual tests, go into the "manual" bucket (subdirectory) and enter one
of the test directories. Each manual test has its own README to walk you
through the process of running it.

Uninstalling the suite
----------------------

The suite can be uninstalled by using

# cd /usr/local/eal4_testing
# make uninstall

Note that you have to uninstall the custom SELinux policy module manually
(when running under LSPP/MLS) *after* running the command above *and* logging
out of lspp_test_r (back to ie. sysadm_r),

# make -C audit-test/utils/selinux-policy uninstall

Note that the uninstallation isn't guaranteed to be perfect. There may be
leftover temporary files on the system, testing services running, etc.
To get rid of these, simply reboot the machine.

Among known leftovers that won't be removed by a reboot are RPM package
dependencies of the suite (installed from 'make depmissing'), which need to
be removed manually (if required).
Also, the suite itself (in eal4_testing) isn't removed automatically.


Workarounds and troubleshooting tips
------------------------------------

Audit-remote tests
------------------

1) SYMPTOMS: The audit-remote tests start to fail when looking for an audit
  record after set test start time. Tests usually fail with "Missing
  DAEMON_ACCEPT record" error message.

  CAUSE: TOE and Network Server (NS for short) have most probably different
  system time.

  FIX: Sync time on TOE and NS, e.g. by using ntp daemon or ntpdate tool.

2) SYMPTOMS: The tests ask for a password and behave "strangely".

  CAUSE: The PASSWD environment variable is not correct on TOE and/or NS

  FIX: On TOE make sure that LBLNET_SVR_IPV4 contains IPv4 address of NS and
  that PASSWD contains root / eal / admin password. Moreover, check that
  profile.bash on NS correctly exports PASSWD with root / eal / admin password
  (see README.netwk_svr).

3) SYMPTOMS: Tests "hang" during execution. This can be a side effect when
  running with SELinux in permissive mode.

  FIX: Make sure SELinux is running in enforcing mode.

4) SYMPTOMS: TOE or NS unable to reach each other when using virt guests.

  CAUSE: Most probably due to incorrectly used IPV4/IPV6 addresses.

  FIX: Use only unicast addresses of global scope (if there are more of them, try
  them all iteratively).

5) SYMPTOMS: TOE has issues running remote actions on NS.

  Suggested is to debug you test env with simple action "echo"
  # /usr/bin/nc -v $LBLNET_SVR_IPV4 5000 <<< \
    "exec,audit-remote,ns_connection_check,no_mode;"

6) SYMPTOMS: There are AVC denials on NS side when running the tests. These
   require addition of following SELinux rule:
     "allow auditctl_t inetd_t:tcp_socket { read write };".

  CAUSE: Please note that this is just a cosmetic issue and does not cause any
  audit-remote tests to FAIL. It's due to leaked descriptors passed to
  the remote_call.bash script when execute by lblnet_tst_server.

  FIX: Uncomment net_hlp_socket_close(&sock) in file lblnet_test_server.c func
  ctl_audit_remote_call() and rebuild the lblnet_server_binary. As a side-effect
  you will loose verbosity in netcat on TOE side. Therefore it is not used by
  default.

7) SYMPTOMS: Unexpected failures appearing and not matching any issue mentioned
   above.

  CAUSE: Failures in this buckert also might be caused by bad cleanup
  of configuration files (e.g. after SIGKILL send the tests, etc.).

  FIX: Make sure all configuration files related to audit remote logging are in
  a "default" state before executing tests. Suggested is to backup and diff
  orig and current version of following
  config files:
    /etc/audit/auditd.conf
    /etc/audisp/audisp-remote.conf
    /etc/audisp/audispd.conf
    /etc/audisp/plugins.d/au-remote.conf


Tips for running on non-RHEL distros
------------------------------------

Note that this has not been tested recently so while
the following information was once true, this information
may no longer be accurate or sufficient.

On SuSE systems the following packages are also required:

audit-libs-python
checkpolicy
libcap
libcap-devel
libselinux
libselinux-devel
libsemanage1
libsepol
libsepol-devel
mcstrans
policycoreutils
pwdutils-plugin-audit
python-selinux
vsftpd

If not running RHEL, make sure vsftpd is available on the system and
configured to start in runlevel 3.  If it is not, configure vsftpd with
the following commands:

On a SuSE system:
# echo audit >> /etc/pwdutils/logging

#---------------------------------------------------------------
# prevent shell-like incorrect vim syntax highlight of this file
# vim: syntax=off :
