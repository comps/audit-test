| Quickstart
+-----------

Create the Audit-Test Tar File
------------------------------

The audit-test suite is best installed from a tar file built from the
git tree on sourceforge.  The tar file can be built on the target system or
on a development system and then transferred to the target system.

Clone the git tree:

# git clone git://audit-test.git.sourceforge.net/gitroot/audit-test/audit-test audit-test.git

To create a tar file with both the audit-test and ltp components,
run 'make dist' from the top of the git tree:

# cd audit-test.git
# make dist

The tar file will be audit-<commit>.tar.gz

Alternatively, you can create a tar file for just the audit-test
suite by running 'make dist' from the 'audit-test' directory at the top of
the git tree:

# cd audit-test.git/audit-test
# make dist

The tar file will be ../audit-test-<commit>.tar.gz


Configure the Target System
---------------------------

Portion of the audit-test suite (network, netfilter, audit-remote)
require a network test server as well as the target system.
Verify that the target system and the network test server have the same time,
the best way is to use ntpd for such a synchronization.

To greatly speed up networking-related test buckets, you can decrease
the number of TCP retries, to make fail (timeout) verification faster.
Assuming the testing machine is close to the network server (local network)
and uses a mostly reliable link layer (Ethernet), the following should
be safe to do:

# echo "net.ipv4.tcp_syn_retries = 2" >> /etc/sysctl.conf
# sysctl -p

Verify that each ext4 filesystem in /etc/fstab has the 'user_xattr' option.
Note that with xfs file system, this option is not needed.

If you do not have an administrative eal user other than the root user, log
in as root (in MLS with sysadm_r role) and add one with the following commands:

# useradd -c "EAL Test User" -G wheel eal
# passwd eal <root's password>

If on a MLS system perform the following additional step as root in secamd_r
role:

# semanage login -a -s staff_u -r s0-s15:c0.c1023 eal

Log into the system as the eal user.


Install the Audit-Test Suite
----------------------------

If running on an MLS system, change your role to "sysadm_r".
# newrole -r sysadm_r

Change to root.
# /bin/su -

Make the following directory for the tests.  You must use this directory name
and location for the tests to run correctly.

# mkdir /usr/local/eal4_testing
# chmod 755 /usr/local/eal4_testing
# cd /usr/local/eal4_testing

Transfer the audit-test tar file to the target system if not using a
git tree on the target.

Untar the previously created tar file into the newly created
/usr/local/eal4_testing directory.

# tar xvf audit-<commit>.tar.gz
or
# tar xvf audit-test-<commit>.tar.gz

Ensure that all files in the target directory have the correct ownership:

# chown -R root:root /usr/local/eal4_testing
# chmod a+rX /usr/local/eal4_testing


Install Package Requirements / Dependencies
-------------------------------------------

# cd /usr/local/eal4_testing/audit-test

If you haven't done so already, install the required suite package dependencies
found as AUDIT_TEST_DEP in rules.mk that can be also listed simply by:

# make deplist

To view only missing packages (so you can ie. pass them to yum-downloader
on another machine with configured repository access), try:

# make depmissing

Assuming you have yum repositories / channels set up correctly, you can
automatically install all required dependencies (excluding those that
have to be downloaded separately, like perl-Expect) simply by:

# make depinstall

The perl-IO-Tty package is available for RHEL7 in the optional channel that
is not available on the installation media. You should be able to download
it via RHN.

The perl-Expect is available via EPEL (Extra Packages for Enterprise Linux).
You can install it after adding the EPEL repository:
http://fedoraproject.org/wiki/EPEL#How_can_I_use_these_extra_packages.3F
or download it directly from the koji build system:
http://koji.fedoraproject.org/koji/packageinfo?packageID=2922

For tips on installing the test suite on other distros,
refer to the notes at the end of this README.


Build the Audit-Test Suite
--------------------------

# cd /usr/local/eal4_testing

If running on an MLS system, install the test policy and change to the
"lspp_test_r" role. Please note that the policy make will require root
password to be able to load the policy. This is because sysadm_r and secadm_r
roles got separated in RHEL7.

# make -C audit-test policy
# newrole -r lspp_test_r

Build the tests.

# make

Or if re-building the tests to run the 32-bit tests:

# make clean    # or make distclean to remove all previous test logs
# make MODE=32

If running on an MLS system, relabel test files. Note that needs to
be done everytime you make the test suite.

# make -C audit-test/utils/selinux-policy relabel verify


Set Entropy Generation
----------------------

The system in evaluated configuration uses SSHD and SSSD daemons configured
with /dev/random as pseudorandom number generator. This device is blocking.
On low entropy systems this might cause timeouts while logging in.

It is advised for testing to use rngd to generate enough entropy in the system.
To seed /dev/random from non-blocking /dev/urandom use this command:

# rngd -r /dev/urandom


Configure the Network Test Server
---------------------------------

Configure the network test server according to the instructions in the
README.netwk_svr file.

Confirm that the
'/usr/local/eal4_testing/audit-test/network/system/client_list.txt' file on
the network test server contains both the IPv4 and IPv6 addresses of the test
machine.


Configure the Netfilter and Labeled Networking Tests
----------------------------------------------------

Follow the steps in README.netfilter to make sure to have properly configured
testing environment before proceeding.

To configure the networking tests execute the command below. Note that this
expects that you have correctly exported all the required environment variables
from the previous section.

# make -C audit-test netconfig

For the localhost ipsec tests to succeed, check that you have both following
tunables set to 0:

# cat /proc/sys/net/ipv4/conf/lo/disable_{xfrm,policy}

if not, add sysctl.conf entries to make them 0:

# echo "net.ipv4.conf.lo.disable_xfrm = 0" >> /etc/sysctl.conf
# echo "net.ipv4.conf.lo.disable_policy = 0" >> /etc/sysctl.conf
# sysctl -p


Configure the Authentication Server
-----------------------------------

Configure the authentication server according to the instructions in the
README.ipa file.

On the TOE export the FQDN of the authentication server (ipa.cctest.com in
this example):

# export IPA_SERVER=ipa.cctest.com

Also export the FQDN of TOE that was used in ipa_clients file. This
record needs to match with the one specified here for things to work. The
record is used to identify the keytab for the host. In the example below
the FQDN toe1.cctest.com was used in ipa_clients file on the authentication
server.

# export IPA_SERVER_TOE_ID=toe1.cctest.com

To configure sssd run the 'sssd-configure' Makefile target in audit-test root
directory.

# cd /usr/local/eal4_testing
# make -C audit-test sssd-configure

To verify the sssd configuration run the 'sssd-verify' Makefile target in
the audit-test root directory. If configuration is successful you should see
PASSED in the output as shown below.

# make -C audit-test sssd-verify
:: Verifying SSSD configuration
:: SSSD configuration verification PASSED

The configuration is done via the 'utils/auth-server/sssd_setup' script. You
can use the 'sssd-reconfigure' target to reconfigure sssd anytime.

# make -C audit-test sssd-reconfigure

Please note that sssd is disabled on the system by default. To start sssd
daemon you can use the 'sssd-start' Makefile target or start sssd via
service or systemctl commands. Similarly, you can use the 'sssd-stop' target
to stop the daemon.


Reboot the Test Machine or Restart Network Services
---------------------------------------------------

After configuring the labeled networking tests, you can perform an optional
system reboot to make sure all services start properly with their new
configuration files.
This is optional as these services should have been restarted by appropriate
Makefiles during the above steps and, therefore, no action should be needed here.


Prepare to Run the Tests
------------------------

Login to the system as the administrative user (eal) using ssh.

The audit tests require you to login as a non-root user in order to verify the
login UID in the audit records.  Some tests will fail if run from the system
console.

If running on an MLS system, change your role to "lspp_test_r".

# newrole -r lspp_test_r

Change to root.

# /bin/su -

Change directory to the audit test suite.

# cd /usr/local/eal4_testing/audit-test

Create a file (e.g. '/root/exports') with exported environment variables
according section "Environmental Variables" in README.netfilter and exported
environment variables for IPA as mentioned in the section "Configure the
Authentication Server" in this README.run and source it:

# . /root/exports

Verify that the time on the test system is synchronized with the time
on the network test server.

As an additional sanity check, you can run:

# make envcheck
or
# COLOR=1 make envcheck | less -R


Run the Tests
-------------

Note that before testing is it advised have rngd running for entropy
generation. See the section "Set entropy generation".

The tests should be run from the top level eal4_testing directory,
recursing into audit-test and ltp directories:

# cd /usr/local/eal4_testing

However, you can 'cd' into one of the child directories (audit-test
or ltp) directly if you want to run only tests from that directory.
You can also 'cd' further into individual audit-test bucket directories
to run only specific test buckets (syscalls, etc.).

In any case, execute:

# make run

If the test suite was built in 32-bit mode on a 64-bit platform, use
the MODE=32 option when running the tests.

# make MODE=32 run

Note: The tests must be run from an interactive terminal; running the tests as
a backgrounded task does not work, and will result in spurious test case
failures.

To run only tests that were not run, failed or for some other reason didn't
PASS, you can use "rerun" instead of another "run":

# make rerun

Notes for FIPS enabled machines:
1) When testing in FIPS mode all tests that use ipsec are expected to FAIL.
Precisely these should be all the ipsec network tests and the ipsec* and
ip_xfrm tests from trustedprograms.
2) Aide has known issues with FIPS and should be disabled in trustedprograms
run.conf. For details see https://bugzilla.redhat.com/show_bug.cgi?id=574770


Run Individual Tests
--------------------

You can use run.bash to run a set of tests or a single test case. This must be
done in a test sub-directory.  Before running individual tests please do
all the preparation steps described earlier in this file.  In addition,
some test directories require manually setting the MODE and PPROFILE
environment variables.

To run all variations of a given testcase, e.g. to run all the ptrace() tests:
# ./run.bash ptrace

To rerun all failed/errored/not executed tests:
# ./run.bash -r

To list all testcases:
# ./run.bash --list

To list all testcases that needs to be rerun:
# ./run.bash --list -r

To run a single testcase by number:
# ./run.bash <number>

To run multiple testcases by numbers:
# ./run.bash <number1> <number2> ...


Run Manual Tests
----------------

To run manual tests, go into the "manual" bucket (subdirectory) and enter one
of the test directories. Each manual test has its own README to walk you
through the process of running it.


Workarounds and Troubleshooting Tips
------------------------------------

Crypto tests
------------
The following tests can return ERROR or FAIL results under specific
circumstances:

1) tests 16 - 20 in crypto bucket in both BASE and MLS, 32 and 64 bit, with and
without disk encryption can ERROR:

  [16] tls_ciphers key_exchange_rsa
  [17] tls_ciphers key_agreement_dh_rsa
  [18] tls_ciphers key_agreement_dh_dsa
  [19] tls_ciphers key_agreement_ecdhe_rsa
  [20] tls_ciphers key_agreement_ecdhe_ecdsa

Errors “TLS client was not started!!” are caused by a race condition. Issue can be fixed by changing line 160 in audit-test/crypto/tests/test_tls_ciphers.bash from wait_for_cmd "egrep '(Read from server 0 bytes|SSL_ERROR_NO_CYPHER_OVERLAP|PR_Poll returned 0x00)' $client_log" to wait_for_cmd "egrep '(Read from server 0 bytes|SSL_ERROR_NO_CYPHER_OVERLAP)' $client_log".

2) tests 34 - 35 and 38 - 39 in network bucket in MLS, in both 32 and 64 bit, with and without disk encryption can FAIL

  [34] accept__remote_ipsec_ipv6_fail_subj_incomp_obj
  [35] socketcall_accept__remote_ipsec_ipv6_fail_subj_incomp_obj
  [38] accept__remote_ipsec_ipv6_fail_subj_domby_obj
  [39] socketcall_accept__remote_ipsec_ipv6_fail_subj_domby_obj

Failures “missing audit record” are caused by incomplete clean-up either on TOE
or on NS or on both of them. The issues can be fixed by restarting ipsec
service on TOE and NS. It is also possible that a testing port 4300 is kept
open, please make sure it’s closed. Moreover, verify that do_accept binary is
not running on TOE and NS.

Network tests
-------------

If you interrupt the network tests, the network test server may be
left in a locked condition, preventing subsequent network tests
from running. To unlock the network test server:

# make -C /usr/local/eal4_testing/audit-test/network unlock

Audit-remote tests
------------------

1) SYMPTOMS: The audit-remote tests start to fail when looking for an audit
  record after set test start time. Tests usually fail with "Missing
  DAEMON_ACCEPT record" error message.

  CAUSE: TOE and Network Server (NS for short) have most probably different
  system time.

  FIX: Sync time on TOE and NS, e.g. by using ntp daemon or ntpdate tool.

2) SYMPTOMS: The tests ask for a password and behave "strangely".

  CAUSE: The PASSWD environment variable is not correct on TOE and/or NS

  FIX: On TOE make sure that LBLNET_SVR_IPV4 contains IPv4 address of NS and
  that PASSWD contains root / eal / admin password. Moreover, check that
  profile.bash on NS correctly exports PASSWD with root / eal / admin password
  (see README.netwk_svr).

3) SYMPTOMS: Tests "hang" during execution. This can be a side effect when
  running with SELinux in permissive mode.

  FIX: Make sure SELinux is running in enforcing mode.

4) SYMPTOMS: TOE or NS unable to reach each other when using virt guests.

  CAUSE: Most probably due to incorrectly set LOCAL_IPV4/IPV6 environment variables.

  FIX: Use only unicast addresses of global scope (if there are more of them, try
  them all iteratively).

5) SYMPTOMS: TOE has issues running remote actions on NS.

  Suggested is to debug you test env with simple action "ns_connection_check"
  # /usr/bin/nc -v $LBLNET_SVR_IPV4 4000 <<< \
    "audit_remote_call:ns_connection_check,no_mode,<TOE IPv4 of global scope>;"

6) SYMPTOMS: There are AVC denials on NS side when running the tests. These
   require addition of following SELinux rule:
     "allow auditctl_t inetd_t:tcp_socket { read write };".

  CAUSE: Please note that this is just a cosmetic issue and does not cause any
  audit-remote tests to FAIL. It's due to leaked descriptors passed to
  the remote_call.bash script when execute by lblnet_tst_server.

  FIX: Uncomment net_hlp_socket_close(&sock) in file lblnet_test_server.c func
  ctl_audit_remote_call() and rebuild the lblnet_server_binary. As a side-effect
  you will loose verbosity in netcat on TOE side. Therefore it is not used by
  default.

7) SYMPTOMS: Unexpected failures appearing and not matching any issue mentioned
   above.

  CAUSE: Failures in this buckert also might be caused by bad cleanup
  of configuration files (e.g. after SIGKILL send the tests, etc.).

  FIX: Make sure all configuration files related to audit remote logging are in
  a "default" state before executing tests. Suggested is to backup and diff
  orig and current version of following
  config files:
    /etc/audit/auditd.conf
    /etc/audisp/audisp-remote.conf
    /etc/audisp/audispd.conf
    /etc/audisp/plugins.d/au-remote.conf

Envcheck issues
---------------

The ‘make envcheck’ command will fail in test ‘/usr/local/eal4_testing has
files correctly labeled’ after a finished test suite execution. To workaround
this problem relabel all files before running the environment check via
command:

    # make -C audit-test/utils/selinux-policy relabel verify


Tips for running on non-RHEL distros
------------------------------------

Note that this has not been tested recently so while
the following information was once true, this information
may no longer be accurate or sufficient.

On SuSE systems the follow packages are also required:

audit-libs-python
checkpolicy
libcap
libcap-devel
libselinux
libselinux-devel
libsemanage1
libsepol
libsepol-devel
mcstrans
policycoreutils
pwdutils-plugin-audit
python-selinux
vsftpd

If not running RHEL, make sure vsftpd is available on the system and
configured to start in runlevel 3.  If it is not, configure vsftpd with
the following commands:

On a SuSE system:
# echo audit >> /etc/pwdutils/logging

#---------------------------------------------------------------
# prevent shell-like incorrect vim syntax highlight of this file
# vim: syntax=off :
