| Quickstart
+-----------

Create the audit-test tar file
------------------------------

The audit-test suite is best installed from a tar file built from the
git tree on sourceforge.  The tar file can be built on the target system or
on a development system and then transferred to the target system.

Clone the git tree:

# git clone git://audit-test.git.sourceforge.net/gitroot/audit-test/audit-test audit-test.git

To create a tar file with both the audit-test and ltp components,
run 'make dist' from the top of the git tree:

# cd audit-test.git
# make dist

The tar file will be named 'audit-test.tar.gz'.

Configure the target system
---------------------------

Portion of the audit-test suite (network, netfilter, netfilebt, audit-remote)
require a network test server as well as the target system.
Verify that the target system and the network test server have the same time,
the best way is to use ntpd for such a synchronization.

To greatly speed up networking-related test buckets, you can decrease
the number of TCP retries, to make fail (timeout) verification faster.
Assuming the testing machine is close to the network server (local network)
and uses a mostly reliable link layer (Ethernet), the following should
be safe to do:

# echo "net.ipv4.tcp_syn_retries = 2" >> /etc/sysctl.conf
# sysctl -p

Verify that each ext4 filesystem in /etc/fstab has the 'user_xattr' option.
Note that with xfs file system, this option is not needed.

If you do not have an administrative eal user other than the root user, log
in as root and add one with the following commands:

# useradd -c "EAL Test User" -G wheel eal
# passwd eal <root's password>

If on an MLS system perform the following additional step:
# semanage login -a -s staff_u -r s0-s15:c0.c1023 eal

Log into the system as the eal user.

Install the audit-test suite
----------------------------

If running on an MLS system, change your role to "sysadm_r".
# newrole -r sysadm_r

Change to root.
# /bin/su -

Make the following directory for the tests.  You must use this directory name
and location for the tests to run correctly.

# mkdir /usr/local/eal4_testing
# chmod 755 /usr/local/eal4_testing
# cd /usr/local/eal4_testing

Transfer the audit-test tar file to the target system if not using a
git tree on the target.

Untar the previously created tar file into the newly created
/usr/local/eal4_testing directory.

# tar xvf audit-test.tar.gz

Ensure that all files in the target directory have the correct ownership:

# chown -R root:root /usr/local/eal4_testing
# chmod -R u=rwX,go=rX /usr/local/eal4_testing

Install package requirements / dependencies
-------------------------------------------

# cd /usr/local/eal4_testing/audit-test

If you haven't done so already, install the required suite package dependencies
found as AUDIT_TEST_DEP in rules.mk that can be also listed simply by:

# make deplist

To view only missing packages (so you can ie. pass them to yum-downloader
on another machine with configured repository access), try:

# make depmissing

Assuming you have yum repositories / channels set up correctly, you can
automatically install all required dependencies (excluding those that
have to be downloaded separately, like perl-Expect) simply by:

# make depinstall

The perl-IO-Tty package is available for RHEL7 in the optional channel that
is not available on the installation media. You should be able to download
it via RHN.

The perl-Expect is available via EPEL (Extra Packages for Enterprise Linux).
You can install it after adding the EPEL repository:
http://fedoraproject.org/wiki/EPEL#How_can_I_use_these_extra_packages.3F
or download it directly from the koji build system:
http://koji.fedoraproject.org/koji/packageinfo?packageID=2922

For tips on installing the test suite on other distros,
refer to the notes at the end of this README.

Build the audit-test suite
--------------------------

# cd /usr/local/eal4_testing

Build the tests.

# make

Or if re-building the tests to run the 32-bit tests on an x86_64 system do:

# make clean    # or make distclean to remove all previous test logs
# make MODE=32

If running on an MLS system, install the test policy and change to the
"lspp_test_r" role. Please note that the policy make will require root
password to be able to load the policy. This is because sysadm_r and secadm_r
roles are separated in the evaluated configuration.

# make -C audit-test policy
# newrole -r lspp_test_r

This step is *not* needed when building/running the suite multiple times
on the same installed system (ie. for MODE=32, like mentioned above).
Simply make sure you remain in the lspp_test_r role or change to it using
newrole if you lose the login session.

Set entropy generation
----------------------

The system in evaluated configuration uses SSHD and SSSD daemons configured
with /dev/random as pseudorandom number generator. This device is blocking.
On low entropy systems this might cause timeouts while logging in.

It is advised for testing to use rngd to generate enough entropy in the system.
To seed /dev/random from non-blocking /dev/urandom use this command:

# rngd -r /dev/urandom

Configure the network test server
---------------------------------

Configure the network test server according to the instructions in the
README.netwk_svr file.

Confirm that the
'/usr/local/eal4_testing/audit-test/network/system/client_list.txt' file on
the network test server contains both the IPv4 and IPv6 addresses of the test
machine.

Configure the authentication server
-----------------------------------

Configure the authentication server according to the instructions in the
README.ipa file.

On the TOE export the FQDN of the authentication server (ipa.cctest.com in
this example):

# export IPA_SERVER=ipa.cctest.com

Also export the FQDN of TOE that was used in ipa_clients file. This
record needs to match with the one specified here for things to work. The
record is used to identify the keytab for the host. In the example below
the FQDN toe1.cctest.com was used in ipa_clients file on the authentication
server.

# export IPA_SERVER_TOE_ID=toe1.cctest.com

To configure sssd run the 'sssd-configure' Makefile target in audit-test root
directory.

# make sssd-configure

To verify the sssd configuration run the 'sssd-verify' Makefile target in
the audit-test root directory. If configuration is successful you should see
PASSED in the output as shown below.

# make sssd-verify
:: Verifying SSSD configuration
:: SSSD configuration verification PASSED

The configuration is done via the 'utils/auth-server/sssd_setup' script. You
can use the 'sssd-reconfigure' target to reconfigure sssd anytime.

# make sssd-reconfigure

Please note that sssd is disabled on the system by default. To start sssd
daemon you can use the 'sssd-start' Makefile target or start sssd via
service or systemctl commands. Similarly, you can use the 'sssd-stop' target
to stop the daemon.

Configure the KVM tests
-----------------------

For the KVM tests to run you need to have RHEL6 or RHEL7 iso image or DVD
installation media handy. You also need to tell the tests where to search
for the installation sources by modifying the config.bash file in the kvm
subfolder.

If you are using an iso installation image, please make sure it is accessible
by the qemu user.  For example, /var/lib/libvirt may be used.

Edit the file
'/usr/local/eal4_testing/audit-test/kvm/config.bash'
and set the variable 'install_media' to the path of the device of your optical
drive or the iso image file.

Configure the KVM iommu tests
-----------------------------

Note: All PCI PT tests are disabled for RHEL6.2 - please skip PCI device
configuration

Edit the file
'/usr/local/eal4_testing/audit-test/kvm-iommu/pci_device.conf'
and select a PCI device to use for PCI passthrough testing.

Edit the file
'/usr/local/eal4_testing/audit-test/kvm-iommu/usb_device.conf'
and select a USB device to use for USB passthrough testing.

Note: The following network hardware was used for successful execution of
kvm-iommu PCI passthrough tests:

* NetXtreme BCM5720 Gigabit Ethernet PCIe (card) / tg3 (PCI device)
* NetXtreme II BCM5706 Gigabit Ethernet / bnx2
* Intel 82576 Gigabit Network Connection / igb

Note: All devices on the bus with the tested PCI device should NOT be
used by the host. The PCI tests will try to detach all other devices
on the bus when using multifunction PCI device for testing.

Configure the labeled networking tests
--------------------------------------

On the test machine:

From the /usr/local/eal4_testing/audit-test directory, perform the following
commands to setup the required configuration for the labeled networking tests:

# export LOCAL_IPV4="<testing machine IPV4 address on the primary network>"
# export LOCAL_IPV6="<testing machine IPV6 address on the primary network>"
# export LBLNET_SVR_IPV4="<network server IPV4 address on the primary network>"
# export LBLNET_SVR_IPV6="<network server IPV6 address on the primary network>"

# make netconfig

For the localhost ipsec tests to succeed, check that you have both following
tunables set to 0:

# cat /proc/sys/net/ipv4/conf/lo/disable_{xfrm,policy}

if not, add sysctl.conf entries to make them 0:

# echo "net.ipv4.conf.lo.disable_xfrm = 0" >> /etc/sysctl.conf
# echo "net.ipv4.conf.lo.disable_policy = 0" >> /etc/sysctl.conf
# sysctl -p

Configure the netfilter tests
-----------------------------

Follow the steps in README.netfilter. Make sure to have properly
configured testing environment before proceeding.

Install the test suite
----------------------

Perform

# cd /usr/local/eal4_testing
# make install

to install various pieces of the test suite into the system.

Reboot the test machine or restart network services
---------------------------------------------------

After configuring the labeled networking tests, you can perform an optional
system reboot to make sure all services start properly with their new
configuration files.
This is optional as these services should have been restarted by appropriate
Makefiles during the above steps and, therefore, no action should be needed here.

Prepare to run the tests
------------------------

Login to the system as the administrative user (eal) using ssh.

The audit tests require you to login as a non-root user in order to verify the
login UID in the audit records.  Some tests will fail if run from the system
console.

If running on an MLS system, change your role to "lspp_test_r".

# newrole -r lspp_test_r

Change to root.

# /bin/su -

Change directory to the audit test suite.

# cd /usr/local/eal4_testing/audit-test

If the test suite was configured to run the netfilter tests, create a file named
profile.bash with exported env variables according to README.netfilter, section
"Environmental variables" (see Example below it) and source it:

# . profile.bash

Otherwise, make sure that the labeled networking tests have been configured
according to the instructions in the previous section. Set the following
environment variables:

# export LBLNET_SVR_IPV4="<local network test server IPV4 address>"
# export LBLNET_SVR_IPV6="<local network test server IPV6 address>"
# export PASSWD=<root/admin user password>

Optionally, you may set eal user password for the network test server. It is
needed during network set-up as well as during the testing. Otherwise, it is
presumed that eal user passwords for both TOE and the network server are the
same.

# export NS_PASSWD=<eal user password on the network test server>

Verify that the time on the test system is synchronized with the time
on the network test server.

As an additional sanity check, you can run:

# make envcheck
or
# COLOR=1 make envcheck | less -R

Run the tests
-------------

Note that before testing is it advised have rngd running for entropy
generation. See the section "Set entropy generation".

The tests should be run from the top level eal4_testing directory,
recursing into audit-test and ltp directories:

# cd /usr/local/eal4_testing

However, you can 'cd' into one of the child directories (audit-test
or ltp) directly if you want to run only tests from that directory.
You can also 'cd' further into individual audit-test bucket directories
to run only specific test buckets (syscalls, etc.).

In any case, execute:

# make run

If the test suite was built in 32-bit mode on a 64-bit platform, use
the MODE=32 option when running the tests.

# make MODE=32 run

Note: The tests must be run from an interactive terminal; running the tests as
a backgrounded task does not work, and will result in spurious test case
failures.

To run only tests that were not run, failed or for some other reason didn't
PASS, you can use "rerun" instead of another "run":

# make rerun

Notes for FIPS enabled machines:
1) When testing in FIPS mode all tests that use ipsec are expected to FAIL.
Precisely these should be all the ipsec network tests and the ipsec* and
ip_xfrm tests from trustedprograms.
2) Aide has known issues with FIPS and should be disabled in trustedprograms
run.conf. For details see https://bugzilla.redhat.com/show_bug.cgi?id=574770

Run individual tests
--------------------

You can use run.bash to run a set of tests or a single test case. This must be
done in a test sub-directory.  Before running individual tests please do
all the preparation steps described earlier in this file.  In addition,
some test directories require manually setting the MODE and PPROFILE
environment variables.

To run all variations of a given testcase, e.g. to run all the ptrace() tests:
# ./run.bash ptrace

To rerun all failed/errored/not executed tests:
# ./run.bash -r

To list all testcases:
# ./run.bash --list

To list all testcases that needs to be rerun:
# ./run.bash --list -r

To run a single testcase by number:
# ./run.bash <number>

To run multiple testcases by numbers:
# ./run.bash <number1> <number2> ...

Run manual tests
----------------

To run manual tests, go into the "manual" bucket (subdirectory) and enter one
of the test directories. Each manual test has its own README to walk you
through the process of running it.

Uninstalling the suite
----------------------

The suite can be uninstalled by using

# cd /usr/local/eal4_testing
# make uninstall

Note that you have to uninstall the custom SELinux policy module manually
(when running under LSPP) *after* running the command above *and* logging
out of lspp_test_r (back to ie. sysadm_r),

# make -C audit-test/utils/selinux-policy uninstall

Note that the uninstallation isn't guaranteed to be perfect. There may be
leftover temporary files on the system, testing services running, etc.
To get rid of these, simply reboot the machine.

Among known leftovers that won't be removed by a reboot are RPM package
dependencies of the suite (installed by 'make depinstall'), which need to
be removed manually (if required).
Also, the suite itself (in eal4_testing) isn't removed automatically.

Workarounds and troubleshooting tips
------------------------------------

Network tests
-------------

If you interrupt the network tests, the network test server may be
left in a locked condition, preventing subsequent network tests
from running. To unlock the network test server:

# make -C /usr/local/eal4_testing/audit-test/network unlock

Audit-remote tests
------------------

1) SYMPTOMS: The audit-remote tests start to fail when looking for an audit
  record after set test start time. Tests usually fail with "Missing
  DAEMON_ACCEPT record" error message.

  CAUSE: TOE and Network Server (NS for short) have most probably different
  system time.

  FIX: Sync time on TOE and NS, e.g. by using ntp daemon or ntpdate tool.

2) SYMPTOMS: The tests ask for a password and behave "strangely".

  CAUSE: The PASSWD environment variable is not correct on TOE and/or NS

  FIX: On TOE make sure that LBLNET_SVR_IPV4 contains IPv4 address of NS and
  that PASSWD contains root / eal / admin password. Moreover, check that
  profile.bash on NS correctly exports PASSWD with root / eal / admin password
  (see README.netwk_svr).

3) SYMPTOMS: Tests "hang" during execution. This can be a side effect when
  running with SELinux in permissive mode.

  FIX: Make sure SELinux is running in enforcing mode.

4) SYMPTOMS: TOE or NS unable to reach each other when using virt guests.

  CAUSE: Most probably due to incorrectly set LOCAL_IPV4/IPV6 environment variables.

  FIX: Use only unicast addresses of global scope (if there are more of them, try
  them all iteratively).

5) SYMPTOMS: TOE has issues running remote actions on NS.

  Suggested is to debug you test env with simple action "ns_connection_check"
  # /usr/bin/nc -v $LBLNET_SVR_IPV4 4000 <<< \
    "audit_remote_call:ns_connection_check,no_mode,<TOE IPv4 of global scope>;"

6) SYMPTOMS: There are AVC denials on NS side when running the tests. These
   require addition of following SELinux rule:
     "allow auditctl_t inetd_t:tcp_socket { read write };".

  CAUSE: Please note that this is just a cosmetic issue and does not cause any
  audit-remote tests to FAIL. It's due to leaked descriptors passed to
  the remote_call.bash script when execute by lblnet_tst_server.

  FIX: Uncomment net_hlp_socket_close(&sock) in file lblnet_test_server.c func
  ctl_audit_remote_call() and rebuild the lblnet_server_binary. As a side-effect
  you will loose verbosity in netcat on TOE side. Therefore it is not used by
  default.

7) SYMPTOMS: Unexpected failures appearing and not matching any issue mentioned
   above.

  CAUSE: Failures in this buckert also might be caused by bad cleanup
  of configuration files (e.g. after SIGKILL send the tests, etc.).

  FIX: Make sure all configuration files related to audit remote logging are in
  a "default" state before executing tests. Suggested is to backup and diff
  orig and current version of following
  config files:
    /etc/audit/auditd.conf
    /etc/audisp/audisp-remote.conf
    /etc/audisp/audispd.conf
    /etc/audisp/plugins.d/au-remote.conf


Tips for running on non-RHEL distros
------------------------------------

Note that this has not been tested recently so while
the following information was once true, this information
may no longer be accurate or sufficient.

On SuSE systems the follow packages are also required:

audit-libs-python
checkpolicy
libcap
libcap-devel
libselinux
libselinux-devel
libsemanage1
libsepol
libsepol-devel
mcstrans
policycoreutils
pwdutils-plugin-audit
python-selinux
vsftpd

If not running RHEL, make sure vsftpd is available on the system and
configured to start in runlevel 3.  If it is not, configure vsftpd with
the following commands:

On a SuSE system:
# echo audit >> /etc/pwdutils/logging

#---------------------------------------------------------------
# prevent shell-like incorrect vim syntax highlight of this file
# vim: syntax=off :
