#!/usr/bin/env bash
#
#   Copyright 2010, 2011 International Business Machines Corp.
#   Copyright 2010, 2011 Ramon de Carvalho Valle
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


source config.bash || exit 2

#   Source SELinux system configuration

source /etc/sysconfig/selinux || exit 2

#   Source helper for changing libgcrypt RNG source

source tp_luks_functions.bash || exit 2

function kvm_install {
	if [[ -n "$1" ]]; then
		[[ -z $install_media ]] && return 1
		chown qemu. $install_media
		chcon -t virt_image_t $install_media

		rm -f /var/lib/libvirt/images/$i.img
		qemu-img create /var/lib/libvirt/images/$1.img ${disksize}G
		chown -R qemu. /var/lib/libvirt/images/
		restorecon -R /var/lib/libvirt/images/
		virt_install_security=
		if [[ $PPROFILE == lspp ]]; then
			chcon -t svirt_image_t $install_media
			chcon system_u:object_r:svirt_image_t:$3 \
				/var/lib/libvirt/images/$1.img
			virt_install_security="--security type=static,label=system_u:system_r:svirt_t:$3"
		fi

		virt-install --name $1 \
			--ram $memory \
			--hvm \
			--accelerate \
			--cdrom=$install_media \
			--file=/var/lib/libvirt/images/$1.img \
			--file-size=$disksize \
			--network=network:$2 \
			--vnc \
			--noautoconsole \
			$virt_install_security \
			--force
	else
		return 1
	fi
}

function kvm_install_kickstart {
	if [[ -n "$1" ]]; then
		[[ -z $install_media ]] && return 1
		chown qemu. $install_media
		chcon -t virt_image_t $install_media

		rm -f /var/lib/libvirt/images/$i.img
		qemu-img create /var/lib/libvirt/images/$1.img ${disksize}G
		chown -R qemu. /var/lib/libvirt/images/
		restorecon -R /var/lib/libvirt/images/
		virt_install_security=
		if [[ $PPROFILE == lspp ]]; then
			chcon -t svirt_image_t $install_media
			chcon -t svirt_image_t /media/$1.img
			chcon system_u:object_r:svirt_image_t:$3 \
				/var/lib/libvirt/images/$1.img
			virt_install_security="--security type=static,label=system_u:system_r:svirt_t:$3"
		fi

		virt-install --name $1 \
			--ram $memory \
			--hvm \
			--accelerate \
			--location=/media/cdrom/ \
			--extra="ks=floppy" \
			--disk path=$install_media,device=cdrom \
			--disk path=/var/lib/libvirt/images/$1.img,size=$disksize \
			--disk path=/media/$1.img,device=floppy,perms=ro \
			--network=network:$2 \
			--vnc \
			--noautoconsole \
			$virt_install_security \
			--force
	else
		return 1
	fi
}

function run_test {
	#   Export the current audit log offset (total size, in bytes) to the
	#   test case.

	offset=$(stat -c %s /var/log/audit/audit.log)

	export offset=$offset

	#   Stop the virtual machine environments

	for i in $(seq $first $last); do
		virsh destroy KVM-Guest-$i
	done

	#   Search for audit records generated for the processes representing
	#   virtual machine environments.

	for i in $(seq $first $last); do
		expression="type==VIRT_CONTROL and msg_1=~destroyed and msg_1=~KVM-Guest-$i"

		if [[ $(augrok -c --seek $offset $expression) -eq 0 ]]; then
			exit_fail "no VIRT_CONTROL (op=stop reason=destroy) record found for KVM-Guest-$i"
		fi
	done

	#   Start the virtual machine environments

	for i in $(seq $first $last); do
		virsh start KVM-Guest-$i
	done

	#   Search for audit records generated for the processes representing
	#   virtual machine environments.

	for i in $(seq $first $last); do
		expression="type==VIRT_MACHINE_ID and msg_1=~KVM-Guest-$i"

		if [[ $(augrok -c --seek $offset $expression) -eq 0 ]]; then
			exit_fail "no VIRT_MACHINE_ID record found for KVM-Guest-$i"
		fi

		expression="type==VIRT_RESOURCE and msg_1=~disk and msg_1=~KVM-Guest-$i"

		if [[ $(augrok -c --seek $offset $expression) -eq 0 ]]; then
			exit_fail "no VIRT_RESOURCE (resrc=disk reason=start) record found for KVM-Guest-$i"
		fi

		expression="type==VIRT_RESOURCE and msg_1=~net and msg_1=~KVM-Guest-$i"

		if [[ $(augrok -c --seek $offset $expression) -eq 0 ]]; then
			exit_fail "no VIRT_RESOURCE (resrc=net reason=start) record found for KVM-Guest-$i"
		fi

		expression="type==VIRT_CONTROL and msg_1=~booted and msg_1=~KVM-Guest-$i"

		if [[ $(augrok -c --seek $offset $expression) -eq 0 ]]; then
			exit_fail "no VIRT_CONTROL (op=start reason=booted) record found for KVM-Guest-$i"
		fi
	done

	#   Export the process IDs of the processes representing virtual
	#   machine environments to the test case.

	pids=$(ps -C qemu-kvm -o pid=)
	pids_count=$(echo "$pids" | wc -l)

	export pids=$pids
	export pids_count=$pids_count

	#   Export the user IDs of the processes representing virtual machine
	#   environments to the test case.

	users=$(ps -C qemu-kvm -o ruser=)
	users_count=$(echo "$users" | wc -l)

	export users=$users
	export users_count=$users_count

	#   Export the SELinux security contexts of the processes representing
	#   virtual machine environments to the test case.

	labels=$(ps -C qemu-kvm -o label=)
	labels_count=$(echo "$labels" | wc -l)

	export labels=$labels
	export labels_count=$labels_count

	#   Export the SELinux security contexts of the resources associated
	#   with the processes representing virtual machine environments to
	#   the test case.

	contexts=$(stat -c %C /var/lib/libvirt/images/KVM-Guest-*.img)
	contexts_count=$(echo "$contexts" | wc -l)

	export contexts=$contexts
	export contexts_count=$contexts_count

	#   Export the user, role, type, and level of the SELinux security
	#   contexts of the processes representing virtual machine
	#   environments to the test case.

	#   Export the user, role, type and level of the SELinux security
	#   contexts of the resources associated with the processes
	#   representing virtual machine environments to the test case.

	label_users=$(echo "$labels" | awk 'BEGIN { FS = ":" } ; { print $1 }')
	label_roles=$(echo "$labels" | awk 'BEGIN { FS = ":" } ; { print $2 }')
	label_types=$(echo "$labels" | awk 'BEGIN { FS = ":" } ; { print $3 }')
	label_levls=$(echo "$labels" | awk 'BEGIN { FS = ":" } ; { print $4 ":" $5 }')

	context_users=$(echo "$contexts" | awk 'BEGIN { FS = ":" } ; { print $1 }')
	context_roles=$(echo "$contexts" | awk 'BEGIN { FS = ":" } ; { print $2 }')
	context_types=$(echo "$contexts" | awk 'BEGIN { FS = ":" } ; { print $3 }')
	context_levls=$(echo "$contexts" | awk 'BEGIN { FS = ":" } ; { print $4 ":" $5 }')

	for i in users roles types levls; do
		for j in label context; do
			eval "export ${j}_${i}=\$${j}_${i}"
		done
	done

	#   Export the process ID of each process representing a virtual
	#   machine environment to the test case.

	for i in $(seq $first $last); do
		eval "${prefix}_${i}_pid=\$(lsof -t /var/lib/libvirt/images/KVM-Guest-${i}.img)"
	done

	for i in $(seq $first $last); do
		eval "export ${prefix}_${i}_pid=\$${prefix}_${i}_pid"
	done

	#   Export the user ID of each process representing a virtual machine
	#   environment to the test case.

	for i in $(seq $first $last); do
		eval "${prefix}_${i}_user=\$(ps -p \$${prefix}_${i}_pid -o ruser=)"
	done

	for i in $(seq $first $last); do
		eval "export ${prefix}_${i}_user=\$${prefix}_${i}_user"
	done

	#   Export the SELinux security context of each process representing a
	#   virtual machine environment to the test case.

	#   Export the SELinux security context of each resource associated
	#   with a process representing a virtual machine environment to the
	#   test case.

	for i in  $(seq $first $last); do
		eval "${prefix}_${i}_label=\$(ps -p \$${prefix}_${i}_pid -o label=)"
		eval "${prefix}_${i}_context=\$(stat -c %C /var/lib/libvirt/images/KVM-Guest-${i}.img)"
	done

	for i in $(seq $first $last); do
		for j in label context; do
			eval "export ${prefix}_${i}_${j}=\$${prefix}_${i}_${j}"
		done
	done

	#   Export the user, role, type and level of the SELinux security
	#   context of each process representing a virtual machine environment
	#   to the test case.

	#   Export the user, role, type and level of the SELinux security
	#   context of each resource associated with a process representing a
	#   virtual machine environment to the test case.

	for i in $(seq $first $last); do
		for j in label context; do
			eval "${prefix}_${i}_${j}_user=\$(echo \"\$${prefix}_${i}_${j}\" | awk 'BEGIN { FS = \":\" } ; { print \$1 }')"
			eval "${prefix}_${i}_${j}_role=\$(echo \"\$${prefix}_${i}_${j}\" | awk 'BEGIN { FS = \":\" } ; { print \$2 }')"
			eval "${prefix}_${i}_${j}_type=\$(echo \"\$${prefix}_${i}_${j}\" | awk 'BEGIN { FS = \":\" } ; { print \$3 }')"
			eval "${prefix}_${i}_${j}_levl=\$(echo \"\$${prefix}_${i}_${j}\" | awk 'BEGIN { FS = \":\" } ; { print \$4 \":\" \$5 }')"
		done
	done

	for i in $(seq $first $last); do
		for j in label context; do
			eval "export ${prefix}_${i}_${j}_user=\$${prefix}_${i}_${j}_user"
			eval "export ${prefix}_${i}_${j}_role=\$${prefix}_${i}_${j}_role"
			eval "export ${prefix}_${i}_${j}_type=\$${prefix}_${i}_${j}_type"
			eval "export ${prefix}_${i}_${j}_levl=\$${prefix}_${i}_${j}_levl"
		done
	done

	#   Export the resource associated with each process representing a
	#   virtual machine environment to the test case.

	for i in $(seq $first $last); do
		eval "${prefix}_${i}_resource=/var/lib/libvirt/images/KVM-Guest-${i}.img"
	done

	for i in $(seq $first $last); do
		eval "export ${prefix}_${i}_resource=\$${prefix}_${i}_resource"
	done

	#   Export the configuration associated with each process representing
	#   a virtual machine environment to the test case.

	for i in $(seq $first $last); do
		eval "${prefix}_${i}_config=/etc/libvirt/qemu/KVM-Guest-${i}.xml"
	done

	for i in $(seq $first $last); do
		eval "export ${prefix}_${i}_config=\$${prefix}_${i}_config"
	done

	#   Export the live configuration associated with each process
	#   representing a virtual machine environment to the test case.

	for i in $(seq $first $last); do
		eval "${prefix}_${i}_live_config=/var/run/libvirt/qemu/KVM-Guest-${i}.xml"
	done

	for i in $(seq $first $last); do
		eval "export ${prefix}_${i}_live_config=\$${prefix}_${i}_live_config"
	done

	#   Export the IP address associated with each process representing a
	#   virtual machine environment to the test case.

	for i in $(seq $first $last); do
		eval "${prefix}_${i}_addr=192.168.\$(( 127+${i} )).\$(( 127+${i} ))"
	done

	for i in $(seq $first $last); do
		eval "export ${prefix}_${i}_addr=\$${prefix}_${i}_addr"
	done

	#   Export the host IP address of the virtual network associated with each
	#   process representing a virtual machine environment to the test case.

	for i in $(seq $first $last); do
		eval "${prefix}_${i}_hostaddr=192.168.\$(( 127+${i} )).1"
	done

	for i in $(seq $first $last); do
		eval "export ${prefix}_${i}_hostaddr=\$${prefix}_${i}_hostaddr"
	done

	#   Execute the test case

	"./$@"
}

function startup_hook {
	source config.bash || exit 2

	#   Source SELinux system configuration

	source /etc/sysconfig/selinux || exit 2

	#   Export the state of SELinux on the system to the test cases

	export SELINUX=$SELINUX

	#   Export the type of policy in use to the test cases

	export SELINUXTYPE=$SELINUXTYPE

	# in FIPS mode set gcrypt RNG source to /dev/urandom
	if [ "x$(cat /proc/sys/crypto/fips_enabled)" = "x1" ]; then
		gcrypt_set_rng /dev/urandom
	fi

	#   Check if SELinux is enabled and in enforcing mode

	if [[ ! $(getenforce) =~ Enforcing ]]; then
		warn "SELinux must be enabled and in enforcing mode for execution of test cases."
	fi

	#   Check the minimum number of virtual machine environments required
	#   for execution of test cases.

	if [[ $process_count -lt 2 ]]; then
		die "A minimum of two virtual machine environments is required for execution of test cases."
	fi

	#   Check the path to an ISO image to use as the install media for the
	#   virtual machine environments.

	if [[ -z "$install_media" ]]; then
		die "The path to an ISO image to use as the install media for the virtual machine environments must be set in config.bash."
	fi

	#   Check the amount of time (total time, in minutes) to wait for the
	#   virtual machine environment network service to start.

	if [[ -z "$kvm_guest_timeout" ]]; then
		#   Default to five minutes
		kvm_guest_timeout=5
	fi

	#   Export the amount of time (total time, in minutes) to wait for the
	#   virtual machine environment network service to start to the test
	#   cases.

	export kvm_guest_timeout=$kvm_guest_timeout

	#   Check the system password of the user that will execute the test
	#   cases.

	if [[ -z "$password" ]]; then
		#   Default to the PASSWD environment variable
		password=$PASSWD
	fi

	#   Export the system password of the user that will execute the test
	#   cases to the test cases.

	export password=$password

	#   Check the system password of the superuser of the virtual machine
	#   environments.

	if [[ -z "$kvm_guest_password" ]]; then
		#   Default to "123changeme"
		kvm_guest_password=123changeme
	fi

	#   Export the system password of the superuser of the virtual machine
	#   environments to the test cases.

	export kvm_guest_password=$kvm_guest_password

	#   Set the hypervisor to connect to by default

	if [[ -z "$VIRSH_DEFAULT_CONNECT_URI" ]]; then
		VIRSH_DEFAULT_CONNECT_URI="qemu:///system"
	fi

	#   Export the first and last numbers used in sequences to the test
	#   cases. The last variable is equal to the number of virtual machine
	#   environments to install/start prior to execution of test cases.

	first=1; last=$process_count

	export first=$first; export last=$last

	#   Set the prefix used in variable names to export to the test cases
	prefix="kvm_guest"

	#   Skip installation if all virtual machines already installed and just start them
	skip_installation=1
	for i in $(seq $first $last); do
		virsh list --all | grep KVM-Guest-$i &> /dev/null || skip_installation=0
	done

	#   Install the virtual machine environments if needed
	if [[ -z "$skip_installation" || $skip_installation -eq 0 ]]; then
		#   Send SIGKILL signal to the processes representing virtual
		#   machine environments used in tests
		pids=$(ps ax | grep [q]emu-kvm.*KVM-Guest | awk '{print $1}')
		for pid in $pids; do
			kill -9 $pid
		done

		# make sure libvirt is running
		restart_service libvirtd

		#   Remove all virtual machine environments and its associated
		#   resources.
		find /etc/libvirt/qemu/ -name "KVM-Guest-*.xml" -exec rm -f '{}' \;
		find /var/lib/libvirt/images/ -type f -exec rm -f '{}' \;
		find /var/run/libvirt/qemu/ -name "KVM-Guest-*.pid" -exec rm -f '{}' \;
		find /var/run/libvirt/qemu/ -name "KVM-Guest-*.xml" -exec rm -f '{}' \;

		#   Create/Recreate a virtual network for each virtual machine
		#   environment.
		for i in $(seq $first $last); do
			cp KVM-Guest-N-Network.xml KVM-Guest-$i-Network.xml

			network_name=KVM-Guest-$i-Network
			network_bridge_name=virbr$i
			network_ip_address=192.168.$(( 127+$i )).1
			network_ip_netmask=255.255.255.0
			network_ip_dhcp_range_start=192.168.$(( 127+$i )).2
			network_ip_dhcp_range_end=192.168.$(( 127+$i )).254

			sed -i "s/{network_name}/$network_name/" KVM-Guest-$i-Network.xml
			sed -i "s/{network_bridge_name}/$network_bridge_name/" KVM-Guest-$i-Network.xml
			sed -i "s/{network_ip_address}/$network_ip_address/" KVM-Guest-$i-Network.xml
			sed -i "s/{network_ip_netmask}/$network_ip_netmask/" KVM-Guest-$i-Network.xml
			sed -i "s/{network_ip_dhcp_range_start}/$network_ip_dhcp_range_start/" KVM-Guest-$i-Network.xml
			sed -i "s/{network_ip_dhcp_range_end}/$network_ip_dhcp_range_end/" KVM-Guest-$i-Network.xml

			cp KVM-Guest-$i-Network.xml /etc/libvirt/qemu/networks/
			ln -s /etc/libvirt/qemu/networks/KVM-Guest-$i-Network.xml /etc/libvirt/qemu/networks/autostart/
		done

		restart_service libvirtd

		#   Install the specified number of virtual machine
		#   environments.

		if [[ -z "$kickstart" || $kickstart -eq 0 ]]; then
			#   Start the attended installation

			for i in $(seq $first $last); do
				eval "guest_label=\$guest_label_$i"
				kvm_install KVM-Guest-$i KVM-Guest-$i-Network \
				    $guest_label

				if [[ $? -ne 0 ]]; then
					die "kvm_install failed"
				fi

				if [[ -z "$timeout" || $timeout -eq 0 ]]; then
					#   Wait indefinitely for the virtual
					#   machine environment to complete
					#   its install.

					while true; do
						pids_count=$(ps -C qemu-kvm -o pid= | wc -l)

						if [[ $pids_count -eq 0 ]]; then
							break
						fi

						sleep 10
					done
				else
					#   Wait the specified timeout (total
					#   time, in minutes) for the virtual
					#   machine environment to complete
					#   its install.

					for i in $(seq 1 $((timeout*6))); do
						pids_count=$(ps -C qemu-kvm -o pid= | wc -l)

						if [[ $pids_count -eq 0 ]]; then
							break
						fi

						sleep 10
					done
				fi
			done

		else
			#   Create a floppy image file containing the
			#   kickstart file for each virtual machine
			#   environment.

			for i in $(seq $first $last); do
				dd bs=1024 count=1440 if=/dev/zero of=/media/KVM-Guest-$i.img

				mkfs.msdos /media/KVM-Guest-$i.img
				chown qemu. /media/KVM-Guest-$i.img
				chcon -t virt_image_t /media/KVM-Guest-$i.img

				mkdir -p /media/floppy/
				umount /media/floppy/ &> /dev/null
				mount -o loop /media/KVM-Guest-$i.img /media/floppy/

				cp KVM-Guest-N-ks.cfg KVM-Guest-$i-ks.cfg

				network_ip=192.168.$(( 127+$i )).$(( 127+$i ))
				network_gateway=192.168.$(( 127+$i )).1
				network_nameserver=192.168.$(( 127+$i )).1
				network_netmask=255.255.255.0
				rootpw=$kvm_guest_password

				sed -i "s/{network_ip}/$network_ip/" KVM-Guest-$i-ks.cfg
				sed -i "s/{network_gateway}/$network_gateway/" KVM-Guest-$i-ks.cfg
				sed -i "s/{network_nameserver}/$network_nameserver/" KVM-Guest-$i-ks.cfg
				sed -i "s/{network_netmask}/$network_netmask/" KVM-Guest-$i-ks.cfg
				sed -i "s/{rootpw}/$rootpw/" KVM-Guest-$i-ks.cfg

				cp KVM-Guest-$i-ks.cfg /media/floppy/ks.cfg

				umount /media/floppy/
			done

			#   Make the installation directory available

			mkdir -p /media/cdrom/
			umount /media/cdrom/ &> /dev/null
			mount -o loop,ro $install_media /media/cdrom/

			#   Start the kickstart installation

			for i in $(seq $first $last); do
				eval "guest_label=\$guest_label_$i"
				kvm_install_kickstart KVM-Guest-$i KVM-Guest-$i-Network \
				    $guest_label

				if [[ $? -ne 0 ]]; then
					die "kvm_install_kickstart failed"
				fi

				if [[ -z "$timeout" || $timeout -eq 0 ]]; then
					#   Wait indefinitely for the virtual
					#   machine environment to complete
					#   its install.

					while true; do
						pids_count=$(ps -C qemu-kvm -o pid= | wc -l)

						if [[ $pids_count -eq 0 ]]; then
							break
						fi

						sleep 10
					done
				else
					#   Wait the specified timeout (total
					#   time, in minutes) for the virtual
					#   machine environment to complete
					#   its install.

					for i in $(seq 1 $((timeout*6))); do
						pids_count=$(ps -C qemu-kvm -o pid= | wc -l)

						if [[ $pids_count -eq 0 ]]; then
							break
						fi

						sleep 10
					done
				fi
			done

			umount /media/cdrom/
		fi
	fi

	#   Start the virtual machine environments

	for i in $(seq $first $last); do
		virsh start KVM-Guest-$i &> /dev/null
	done

	#   Export the filter key to use in audit rules

	key=$(tr -cd 0-9A-Za-z < /dev/urandom | head -c 31)

	export key=$key

	#   Save the current audit log

	cp /var/log/audit/audit.log /tmp/audit-$(date +%F_%H:%M:%S).log

	#   Clear the current audit log

	> /var/log/audit/audit.log
}

function cleanup_hook {
	# destroy all virtual machines after testing
	for i in $(seq $first $last); do
		virsh destroy KVM-Guest-$i &> /dev/null
	done

	# in FIPS mode restore gcrypt RNG source to /dev/random
	if [ "x$(cat /proc/sys/crypto/fips_enabled)" = "x1" ]; then
		gcrypt_set_rng /dev/urandom
	fi
}

#   Selective audit (FAU_SEL.1)
#
#   FAU_SEL.1.1
#
#   The TSF shall be able to select the set of events to be audited from the
#   set of all auditable events based on the following attributes:
#
#   * Virtual machine category label
#   * Virtual machine resources category label
#
#   The TOE provides an application that allows specification of the audit
#   rules which injects the rules into the kernel for enforcement. The Linux
#   kernel auditing mechanism obtains all audit events and decides based on
#   this rule set whether an event is forwarded to the audit daemon for
#   storage.
#
#   Selective audit (FAU_SEL.1) test cases
#
#   test_auditctl_rule_subj.bash
#
#   Assert audit records are generated based on virtual machine category
#   label.

+ test_auditctl_rule_subj.bash

#   test_auditctl_rule_obj.bash
#
#   Assert audit records are generated based on virtual machine resource
#   category label.

+ test_auditctl_rule_obj.bash


#   Enhanced user-subject binding (FIA_USB.2)
#
#   FIA_USB.2.2
#
#   The TSF shall enforce the following rules on the initial association of
#   user security attributes with subjects acting on the behalf of users:
#
#   * Upon instantiating a virtual machine, the category selected by the
#   virtual machine management daemon is associated with the process
#   representing a virtual machine environment.
#
#   The libvirt virtual machine management daemon automatically identifies a
#   yet unused category during the initial configuration of a virtual machine
#   and stores the information together with the virtual machine configuration
#   in /etc/libvirt/qemu/. This category is applied everytime the virtual
#   machine is instantiated.
#
#   Enhanced user-subject binding (FIA_USB.2) test cases
#
#   test_libvirt_label_match.bash
#
#   Assert processes representing virtual machine environments and its
#   associated resources have the same category label.

+ test_libvirt_label_match.bash

#   test_libvirt_label_process.bash
#
#   Assert categories selected by libvirt are associated with the processes
#   representing virtual machine environments.

+ test_libvirt_label_process.bash

#   test_libvirt_label_process_unique.bash
#
#   Assert processes representing virtual machine environments execute with
#   different category labels.

+ test_libvirt_label_process_unique.bash

#   test_libvirt_label_resource.bash
#
#   Assert categories selected by libvirt are associated with the resources
#   associated with the processes representing virtual machine environments.

# libvirt is not involved in labeling resources in MLS mode
if [[ $PPROFILE != lspp ]]; then
	+ test_libvirt_label_resource.bash
fi

#   test_libvirt_label_resource_unique.bash
#
#   Assert resources associated with the processes representing virtual
#   machine environments have different category labels.

+ test_libvirt_label_resource_unique.bash

#   test_libvirt_user_qemu.bash
#
#   Assert processes representing virtual machine environments execute as
#   qemu user.

+ test_libvirt_user_qemu.bash


#   Complete access control (FDP_ACC.2(VIRT))
#
#   FDP_ACC.2.1
#
#   The TSF shall enforce the Compartment Access Control Policy on:
#
#   * Subjects: compartments
#   * Objects: all virtual machine resources defined with the Security Policy
#     Model.
#
#   and all operations among subjects and objects covered by the SFP.
#
#   Compartments are implemented as processes executing concurrently
#   with standard Linux processes. These compartment processes provide the
#   virtual machine environment.
#
#   Complete access control (FDP_ACC.2(VIRT)) test cases
#
#   Information about the smb_t, abrt_helper_t and ptchown_t transitions
#
#   The transitions from svirt_t to abrt_helper_t and ptchown_t
#   is required to allow qemu to use pt_chown helper to change the
#   ownership and permissions of a slave pseudo terminal.

#   test_selinux_trans_from_svirt.bash
#
#   Assert processes executing with svirt_t SELinux type are allowed to
#   transition to ptchown_t and abrt_helper_t only.

+ test_selinux_trans_from_svirt.bash

#   test_selinux_trans_from_svirt_enforce.bash
#
#   Assert processes executing with svirt_t SELinux type are allowed to
#   transition to ptchown_t and abrt_helper_t only.

if [[ $enable_selinux_enforce -eq 1 ]]; then
	+ test_selinux_trans_from_svirt_enforce.bash
fi

#   test_selinux_trans_to_svirt.bash
#
#   Assert only processes executing with unconfined_t or virtd_t SELinux types
#   are allowed to transition to svirt_t.

+ test_selinux_trans_to_svirt.bash

#   test_selinux_trans_to_svirt_enforce.bash
#
#   Assert only processes executing with unconfined_t or virtd_t SELinux types
#   are allowed to transition to svirt_t.

if [[ $enable_selinux_enforce -eq 1 ]]; then
	+ test_selinux_trans_to_svirt_enforce.bash
fi

#   test_selinux_attr_virt_domain.bash
#
#   Assert virt_domain attribute has svirt_t as its associated
#   types only.

+ test_selinux_attr_virt_domain.bash

#   test_selinux_attr_virt_image_type.bash
#
#   Assert virt_image_type attribute has virt_content_t, svirt_image_t,
#   virt_image_t and qemu_image_t as its associated types only.

+ test_selinux_attr_virt_image_type.bash

#   TODO: Test Intel VT-d support
#   http://software.intel.com/en-us/articles/intel-virtualization-technology-f
#   or-directed-io-vt-d-enhancing-intel-platforms-for-efficient-virtualization
#   -of-io-devices/


#   Security attribute based access control (FDP_ACF.1(VIRT))
#
#   FDP_ACF.1.1
#
#   The TSF shall enforce the Compartment Access Control Policy to objects
#   based on the following:
#
#   * Subject security attributes:
#     - SELinux-based: Non-hierarchical category part of the SELinux label
#     - IOMMU-based: the physical resource's DMA address space mapped to the
#       virtual machine.
#
#   * Object security attributes:
#     - SELinux-based: Disks, network devices: non-hierarchical category part
#       of the SELinux label.
#     - IOMMU-based: the physical resource's DMA address space
#
#   * No other security attribute.
#
#   FDP_ACF.1.2
#
#   The TSF shall enforce the following rules to determine if an operation
#   among controlled subjects and controlled objects is allowed:
#
#   * SELinux-based: Access of a compartment to an object is allowed when the
#     requested mode of access is allowed for the compartment by the
#     compartment access control permission settings for that object.
#
#   * IOMMU-based: Access of a compartment to an object is granted when the
#     IOMMU of the underlying hardware is configured to link the hardware
#     resource's DMA address space into the virtual machine process address
#     space.
#
#   The TOE provides the following types of access control:
#
#   SELinux-based: If the category of the acces-requesting virtual machine
#   matches the category of the accessed resource, access is granted.
#   Otherwise, access is denied to the resource.
#
#   IOMMU-based: The TOE is able to use the IOMMU of the underlying machine to
#   establish the link between the virtual machine process' address space and
#   the hardware resource's DMA address space. Note that the TOE only sets up
#   the memory mapping in the IOMMU. The IOMMU enforces the configuration.

#   test_resource_mount_readonly.bash
#
#   Assert resources associated with the processes representing virtual
#   machine environments can not be modified when accessed in read-only mode.

+ test_resource_mount_readonly.bash

#   test_access_enforce.bash
#
#   Assert one virtual machine can not access resources of another.

+ test_access_enforce.bash


#   Export of user data with security attributes (FDP_ETC.2(VIRT))
#
#   FDP_ETC.2.1
#
#   The TSF shall enforce the Compartment Access Control Policy and
#   Compartment Information Flow Control Policy when exporting user data,
#   controlled under the SFP(s), outside of the TOE.
#
#   FDP_ETC.2.2
#
#   The TSF shall export the user data with the user data's associated
#   security attributes.
#
#   FDP_ETC.2.3
#
#   The TSF shall ensure that the security attributes, when exported outside
#   the TOE, are unambiguously associated with the exported user data.
#
#   FDP_ETC.2.4
#
#   The TSF shall enforce the following rules when user data is exported from
#   the TOE: The host system ensures that the source IP-address is equal to
#   the IP-address assigned to the virtual machine initiating the data export
#   using the network.
#
#   Export of user data with security attributes (FDP_ETC.2(VIRT)) test cases
#
#   test_network_export_other_source_ip.exp
#
#   Assert precesses representing virtual machine environments can not export
#   data using the network with source IP addresses of other non associated
#   virtual networks.

if [[ -z "$skip_networking" || $skip_networking -eq 0 ]]; then
	+ test_network_export_other_source_ip.exp
fi

#   test_network_export_source_ip.bash
#
#   Assert data originating from the processes representing virtual machine
#   environments using the network has its associtated source IP addresses.

if [[ -z "$skip_networking" || $skip_networking -eq 0 ]]; then
	+ test_network_export_source_ip.bash
fi


#   Simple security attributes (FDP_IFF.1(VIRT))
#
#   FDP_IFF.1.1
#
#   The TSF shall enforce the Compartment Information Flow Control Policy
#   based on the following types of subject and information security
#   attributes:
#
#   * Subject security attributes:
#     - Process ID of the process providing a virtual machine environment
#     - No additional attributes
#
#   * Information security attributes:
#     - Any attribute indicating the originating process providing a virtual
#       machine environment.
#     - No TSF data security attributes
#     - No additional information security attributes
#
#   Although virtual machines are implemented using Linux processes, the
#   virtualization mechanism does not allow the use of any Linux inter-process
#   communication by such a process. Therefore, a process cannot communicate
#   with other virtual machines or other Linux processes except via the
#   network channel to the guest system and the VNC network channel to the
#   console of the virtual machine environment. These network channels are
#   mediated by the TOE.
#
#   Simple security attributes (FDP_IFF.1(VIRT)) test cases
#
#   test_selinux_ipc_signals.bash
#
#   Assert processes representing virtual machine environments do not receive
#   signals from other processes representing virtual machine environments
#   and any other non privileged processes.

if [[ $(getenforce) =~ Enforcing ]]; then
	+ test_selinux_ipc_signals.bash
fi

#   TODO: Test other inter-process communication methods (i.e. files, sockets,
#   message queues, pipes, named pipes, semaphores, shared memory and
#   memory-mapped files).


#   Import of user data with security attributes (FDP_ITC.2(BA))

#   FDP_ITC.2.1
#
#   The TSF shall enforce the Network Information Flow Control Policy when
#   importing user data, controlled under the SFP, from outside of the TOE.
#
#   FDP_ITC.2.2
#
#   The TSF shall use the security attributes associated with the imported
#   user data.
#
#   FDP_ITC.2.3
#
#   The TSF shall ensure that the protocol used provides for the unambiguous
#   association between the security attributes and the user data received.
#
#   FDP_ITC.2.4
#
#   The TSF shall ensure that interpretation of the security attributes of the
#   imported user data is as intended by the source of the user data.
#
#   FDP_ITC.2.5
#
#   The TSF shall enforce the following rules when importing user data
#   controlled under the SFP from outside the TOE: No additional importation
#   control rules.
#
#   Import of user data with security attributes (FDP_ITC.2(BA)) test cases
#
#   test_network_import_other_dest_ip.exp
#
#   Assert precesses representing virtual machine environments can not import
#   data using the network with destination IP addresses of other non
#   associated virtual networks.

if [[ -z "$skip_networking" || $skip_networking -eq 0 ]]; then
	+ test_network_import_other_dest_ip.exp
fi


#   Management of security attributes (FMT_MSA.1(VIRT-CACP))
#
#   FMT_MSA.1.1
#
#   The TSF shall enforce the Compartment Access Control Policy to restrict
#   the ability to change_default, query, modify, delete the security
#   attributes of subjects and objects covered by the SFP to the authorized
#   administrator of the virtual machine configuration.
#
#   The authorized administrator is the user allowed to access the libvirt
#   daemon and configure virtual machine parameters.
#
#   Management of security attributes (FMT_MSA.1(VIRT-CIFCP))
#
#   FMT_MSA.1.1
#
#   The TSF shall enforce the Compartment Information Flow Control Policy to
#   restrict the ability to change_default, query, modify, delete the security
#   attributes of subjects and information covered by the SFP to the
#   authorized administrator of the virtual machine configuration.
#
#   The authorized administrator is the user allowed to access the libvirt
#   daemon and configure virtual machine parameters.
#
#   Management of security attributes (FMT_MSA.1(VIRT-CACP, VIRT-CIFCP)) test
#   cases
#
#   test_selinux_chcon_resource.bash
#
#   Assert only superuser is allowed to change virtual machine resource
#   category labels.

+ test_selinux_chcon_resource.bash


#   Management of TSF data (FMT_MTD.1(VIRT-COMP))
#
#   FMT_MTD.1.1
#
#   The TSF shall restrict the ability to modify, delete, initialize the
#   compartment security attributes to the authorized administrator of the
#   virtual machine configuration.
#
#   The authorized administrator is the user allowed to access the libvirt
#   daemon and configure virtual machine parameters.
#
#   Management of TSF data (FMT_MTD.1(VIRT-COMP)) test cases
#
#   test_libvirt_access.bash
#
#   Assert only superuser and non privileged users in libvirt group are
#   allowed to access the libvirt daemon and configure virtual machine
#   parameters.

+ test_libvirt_access.bash

#   test_libvirt_access_ssh.bash
#
#   Assert only superuser and non privileged users in libvirt group are
#   allowed to access the libvirt daemon and configure virtual machine
#   parameters through SSH.

+ test_libvirt_access_ssh.bash

#   vim: set noet sw=8 syn=sh ts=8 tw=0:
