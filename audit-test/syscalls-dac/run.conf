###############################################################################
#   Copyright (c) 2014 Red Hat, Inc. All rights reserved.
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of version 2 the GNU General Public License as
#   published by the Free Software Foundation.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
###############################################################################

function run_test {
    declare status x=$1
    shift
    declare args=("$@")

    # Force the audit log to rotate
    rotate_audit_logs || return 2

    # If res=fail is used and errno= is undefined,
    # define it as 13 (Permission denied)
    if [[ "${args[@]}" =~ "res=fail" ]] && \
       ! [[ "${args[@]}" =~ "errno=" ]]; then
        args+=("errno=13")
    fi

    # Run the test
    cd tests
    eval "${args[@]}" "./test_$x.bash"
    status=$?

    # Display the log items if it failed
    if [[ $status == 1 ]]; then
        echo
        echo augrok output
        echo -------------
        augrok type!=DAEMON_ROTATE
    fi

    return $status
}

### TEMPLATE
#
# This template follows the following logic:
#
# a) syscall respects user ownership
# b) syscall respects group ownership
# c) syscall respects supplementary groups
# d) syscall respects file mode
# e) syscall respects ACL metadata
# f) syscall respects file capabilities (ie. cap_dac_override)
# g) syscall respects path traversal
# h) (optional) special syscall-specific cases
#
# Description:
# Use three hash signs (#), followed by a space, followed by syscall name,
# followed by a newline and a single hash sign to denote a named syscall
# section. Optional comments go between these two lines.
# Use a single hash sign with no whitespace for sub-sections.
# Specify subject first, follow with object, then expected result,
# then test-specific metadata (objdir/filecap/..), then syscall-specific
# metadata (opentype=rdwr, ..).
# Wrap lines longer than 80 characters with a backslash (\), indent
# the next line to the subject specification (skip syscall name).
# Don't use empty lines as separators within the syscall section.
# End the section with an empty line.
#
# Recommended values:
# Aside from values used in the skeleton,
# - use "root" for testing foreign/unspecified user or group as it's nearly
#   guaranteed to exist
# - use mode 0000 for res=pass, 0777 for res=fail for all tests (except mode)
#   when testing syscalls that ignore file mode
#
# Skeleton:
#
# ### syscall-name
# # This is an optional comment.
# #
# #user
# + syscall-name subj=user1:group1 obj=file#user1:group1#0700 res=pass
# + syscall-name subj=user1:group1 obj=file#user2:group1#0700 res=fail
# #group
# + syscall-name subj=user1:group1 obj=file#user2:group1#0070 res=pass
# + syscall-name subj=user1:group1 obj=file#user2:group2#0070 res=fail
# #suppl. groups
# + syscall-name subj=user1:group1,group2 obj=file#user2:group2#0070 res=pass
# + syscall-name subj=user1:group1,group3 obj=file#user2:group2#0070 res=fail
# #mode
# + syscall-name subj=user1:group1 obj=file#user1:group1#0700 res=pass
# + syscall-name subj=user1:group1 obj=file#user1:group1#0000 res=fail
# #acl
# + syscall-name subj=user1:group1 obj=file#user2:group2#0000#u:user1:rwx \
#                res=pass
# + syscall-name subj=user1:group1 obj=file#user2:group2#0777#u:user1:--- \
#                res=fail
# #filecap
# + syscall-name subj=user1:group1 obj=file#user2:group2#0000 res=pass \
#                filecap=all+ep
# + syscall-name subj=user1:group1 obj=file#user2:group2#0000 res=fail
# #path traversal
# + syscall-name subj=user1:group1 obj=file#user1:group1#0700 res=pass \
#                objdir=dir#root:root#0001
# + syscall-name subj=user1:group1 obj=file#user1:group1#0700 res=fail \
#                objdir=dir#root:root#0776
#
###

#
# syntax definitions:
#
# subject_spec:
# <user>:<primary_group>[,<supplementary_group>][,...]
# - user: unix user name
# - primary_group: unix group name
# - supplementary_group: unix group name
#
# object_spec:
# type#<user>:<group>#octal_mode#acl_spec[,acl_spec][,...]
# - type: file, dir, mqueue, ...
# - user: unix user name (obj owner)
# - group: unix group name (obj owner)
# - octal_mode: permissions, [N]NNN, ie. 0644 or 644
# - acl_spec (optional): as defined in setfacl(1), "ACL ENTRIES",
#   used as argument for `setfacl -m'

#
# possible options (test-specific options not defined here):
#
# subj=<subject_spec>
# - subject (unix user) to run the syscall as
# obj=<object_spec>
# - object to create for testing
# objdir=<object_spec>
# - (optional) directory spec to create the object in
# filecap=<capabilities>
# - (optional) file capabilities used on the syscall binary,
#   syntax defined in cap_from_text(3), "TEXTUAL REPRESENTATION"
# res=<pass/fail>
# - expected test result
#

### chmod
# This syscall checks only file owner, hence res=pass always for:
# - group (+ supplementary groups)
# - file mode (+ acl as well)
#
#user
+ chmod subj=user1:group1 obj=file#user1:group1#0000 res=pass set_perm=0777
+ chmod subj=user1:group1 obj=file#user2:group1#0777 res=fail errno=1 \
        set_perm=0000
#group
+ chmod subj=user1:group1 obj=file#user1:group1#0000 res=pass set_perm=0777
+ chmod subj=user1:group1 obj=file#user1:group2#0000 res=pass set_perm=0777
#suppl. groups
+ chmod subj=user1:group1,group2 obj=file#user1:group2#0000 res=pass \
        set_perm=0777
+ chmod subj=user1:group1,group3 obj=file#user1:group2#0000 res=pass \
        set_perm=0777
#mode
+ chmod subj=user1:group1 obj=file#user1:group1#0777 res=pass set_perm=0000
+ chmod subj=user1:group1 obj=file#user1:group1#0000 res=pass set_perm=0777
#acl
+ chmod subj=user1:group1 obj=file#user1:group1#0000#u:user1:rwx \
        res=pass set_perm=0777
+ chmod subj=user1:group1 obj=file#user1:group1#0000#u:user1:--- \
        res=pass set_perm=0777
#filecap
+ chmod subj=user1:group1 obj=file#user2:group2#0000 res=pass \
        filecap=all+ep set_perm=0777
+ chmod subj=user1:group1 obj=file#user2:group2#0777 res=fail errno=1 \
        set_perm=0000
#path traversal
+ chmod subj=user1:group1 obj=file#user1:group1#0000 res=pass \
        objdir=dir#root:root#0001 set_perm=0777
+ chmod subj=user1:group1 obj=file#user1:group1#0777 res=fail \
        objdir=dir#root:root#0776 set_perm=0000

### chown
# Whether a user can chown a file is determined only by the file owner,
# (groups, mode, acl are ignored).
# In addition, special semantics apply - as normal user (without capabilities),
# it is
# - impossible to change file owner to anyone else
# - impossible to change group to one that the user doesn't have
#   (either as primary group or as part of supplementary group list)
#
#user
+ chown subj=user1:group1 obj=file#user1:group1#0000 res=pass set_user=user1
+ chown subj=user1:group1 obj=file#user2:group1#0777 res=fail errno=1 \
        set_user=user1
#group
+ chown subj=user1:group1 obj=file#user1:group1#0000 res=pass \
        set_user=user1 set_group=group1
+ chown subj=user1:group1 obj=file#user1:group2#0777 res=pass \
        set_user=user1 set_group=group1
#suppl. groups
+ chown subj=user1:group1,group3 obj=file#user1:group3#0000 res=pass \
        set_user=user1 set_group=group1
+ chown subj=user1:group1,group3 obj=file#user1:group2#0000 res=pass \
        set_user=user1 set_group=group1
#mode
+ chown subj=user1:group1 obj=file#user1:group2#0777 res=pass \
        set_user=user1 set_group=group1
+ chown subj=user1:group1 obj=file#user1:group2#0000 res=pass \
        set_user=user1 set_group=group1
#acl
+ chown subj=user1:group1 obj=file#user1:group2#0000#u:user1:rwx \
        res=pass set_user=user1 set_group=group1
+ chown subj=user1:group1 obj=file#user1:group2#0000#u:user1:--- \
        res=pass set_user=user1 set_group=group1
#filecap
+ chown subj=user1:group1 obj=file#user2:group2#0000 res=pass \
        filecap=all+ep set_user=user1 set_group=group1
+ chown subj=user1:group1 obj=file#user2:group2#0777 res=fail errno=1 \
        set_user=user1 set_group=group1
#path traversal
+ chown subj=user1:group1 obj=file#user1:group2#0000 res=pass \
        objdir=dir#root:root#0001 set_user=user1 set_group=group1
+ chown subj=user1:group1 obj=file#user1:group2#0777 res=fail \
        objdir=dir#root:root#0776 set_user=user1 set_group=group1
#special - foreign owner works only with cap_chown
+ chown subj=user1:group1 obj=file#user1:group1#0777 res=fail errno=1 \
        set_user=root
+ chown subj=user1:group1 obj=file#user1:group1#0000 res=pass \
        filecap=cap_chown+ep set_user=root
#special - chown to foreign group (primary, supplementary or cap_chown)
+ chown subj=user1:group1 obj=file#user1:group2#0777 res=fail errno=1 \
        set_user=user1 set_group=root
+ chown subj=user1:root obj=file#user1:group2#0000 res=pass \
        set_user=user1 set_group=root
+ chown subj=user1:group1,root obj=file#user1:group2#0000 res=pass \
        set_user=user1 set_group=root
+ chown subj=user1:group1 obj=file#user1:group2#0000 res=pass \
        filecap=cap_chown+ep set_user=user1 set_group=root

### lchown
# See chown.
#
#user
+ lchown subj=user1:group1 obj=file#user1:group1#0000 res=pass set_user=user1
+ lchown subj=user1:group1 obj=file#user2:group1#0777 res=fail errno=1 \
         set_user=user1
#group
+ lchown subj=user1:group1 obj=file#user1:group1#0000 res=pass \
         set_user=user1 set_group=group1
+ lchown subj=user1:group1 obj=file#user1:group2#0777 res=pass \
         set_user=user1 set_group=group1
#suppl. groups
+ lchown subj=user1:group1,group3 obj=file#user1:group3#0000 res=pass \
         set_user=user1 set_group=group1
+ lchown subj=user1:group1,group3 obj=file#user1:group2#0000 res=pass \
         set_user=user1 set_group=group1
#mode
+ lchown subj=user1:group1 obj=file#user1:group2#0777 res=pass \
         set_user=user1 set_group=group1
+ lchown subj=user1:group1 obj=file#user1:group2#0000 res=pass \
         set_user=user1 set_group=group1
#acl
+ lchown subj=user1:group1 obj=file#user1:group2#0000#u:user1:rwx \
         res=pass set_user=user1 set_group=group1
+ lchown subj=user1:group1 obj=file#user1:group2#0000#u:user1:--- \
         res=pass set_user=user1 set_group=group1
#filecap
+ lchown subj=user1:group1 obj=file#user2:group2#0000 res=pass \
         filecap=all+ep set_user=user1 set_group=group1
+ lchown subj=user1:group1 obj=file#user2:group2#0777 res=fail errno=1 \
         set_user=user1 set_group=group1
#path traversal
+ lchown subj=user1:group1 obj=file#user1:group2#0000 res=pass \
         objdir=dir#root:root#0001 set_user=user1 set_group=group1
+ lchown subj=user1:group1 obj=file#user1:group2#0777 res=fail \
         objdir=dir#root:root#0776 set_user=user1 set_group=group1
#special - foreign owner works only with cap_chown
+ lchown subj=user1:group1 obj=file#user1:group1#0777 res=fail errno=1 \
         set_user=root
+ lchown subj=user1:group1 obj=file#user1:group1#0000 res=pass \
         filecap=cap_chown+ep set_user=root
#special - lchown to foreign group (primary, supplementary or cap_chown)
+ lchown subj=user1:group1 obj=file#user1:group2#0777 res=fail errno=1 \
         set_user=user1 set_group=root
+ lchown subj=user1:root obj=file#user1:group2#0000 res=pass \
         set_user=user1 set_group=root
+ lchown subj=user1:group1,root obj=file#user1:group2#0000 res=pass \
         set_user=user1 set_group=root
+ lchown subj=user1:group1 obj=file#user1:group2#0000 res=pass \
         filecap=cap_chown+ep set_user=user1 set_group=root

### mq_open
# This syscall requires access depending on a given mode, ie.
#
#  * read mode       => read access required
#  * write mode      => write mode required
#  * read-write mode => both read and write access required
#
# Notice that /dev/mqueue supports neither ACL nor file capabilities.
#
#user
+ mq_open subj=user1:group1 obj=mq#user1:group1#0400 op=read res=pass
+ mq_open subj=user1:group1 obj=mq#user2:group1#0700 op=read res=fail
#group
+ mq_open subj=user1:group1 obj=mq#user2:group1#0040 op=read res=pass
+ mq_open subj=user1:group1 obj=mq#user2:group2#0770 op=read res=fail
#suppl. groups
+ mq_open subj=user1:group1,group2 obj=mq#user2:group2#0040 op=read res=pass
+ mq_open subj=user1:group1,group3 obj=mq#user2:group2#0770 op=read res=fail
# #mode
+ mq_open subj=user1:group1 obj=mq#user1:group1#0400 op=read res=pass
+ mq_open subj=user1:group1 obj=mq#user1:group1#0377 op=read res=fail
#acl
+ mq_open subj=user1:group1 obj=mq#user2:group2#0000#u:user1:r-- op=read \
          res=fail
+ mq_open subj=user1:group1 obj=mq#user2:group2#0777#u:user1:-wx op=read \
          res=pass
#filecap
+ mq_open subj=user1:group1 obj=mq#user2:group2#0000 op=read res=fail \
          filecap=all+ep
+ mq_open subj=user1:group1 obj=mq#user2:group2#0773 op=read res=fail
#path traversal
+ mq_open subj=user1:group1 obj=mq#user1:group1#0400 op=read res=pass \
          objdir=mqdir#root:root#0001
+ mq_open subj=user1:group1 obj=mq#user1:group1#0377 op=read res=fail \
          objdir=mqdir#root:root#0776
# special syscall-specific cases (modes - read, write, rdwr)
+ mq_open subj=user1:group1 obj=mq#user2:group2#0004 op=read  res=pass
+ mq_open subj=user1:group1 obj=mq#user2:group2#0003 op=read  res=fail
+ mq_open subj=user1:group1 obj=mq#user2:group2#0002 op=write res=pass
+ mq_open subj=user1:group1 obj=mq#user2:group2#0005 op=write res=fail
+ mq_open subj=user1:group1 obj=mq#user2:group2#0006 op=rdwr  res=pass
+ mq_open subj=user1:group1 obj=mq#user2:group2#0001 op=rdwr  res=fail

### linkat
# This syscall has a special case when a subject owns the object - in this
# case, the file mode seems to be ignored, therefore we test "mode" via
# the "other" bit and check for this special case separately.
# Since this syscall also has two path arguments, we sanity-test
# the second one as a special case.
#
#user
+ linkat subj=user1:group1 obj=file#user1:group1#0700 res=pass
+ linkat subj=user1:group1 obj=file#user2:group1#0700 res=fail errno=1
#group
+ linkat subj=user1:group1 obj=file#user2:group1#0070 res=pass
+ linkat subj=user1:group1 obj=file#user2:group2#0070 res=fail errno=1
#suppl. groups
+ linkat subj=user1:group1,group2 obj=file#user2:group2#0070 res=pass
+ linkat subj=user1:group1,group3 obj=file#user2:group2#0070 res=fail errno=1
#mode
+ linkat subj=user1:group1 obj=file#root:root#0007 res=pass
+ linkat subj=user1:group1 obj=file#root:root#0000 res=fail errno=1
#acl
+ linkat subj=user1:group1 obj=file#user2:group2#0000#u:user1:rwx \
         res=pass
+ linkat subj=user1:group1 obj=file#user2:group2#0777#u:user1:--- \
         res=fail errno=1
#filecap
+ linkat subj=user1:group1 obj=file#user2:group2#0000 res=pass \
         filecap=all+ep
+ linkat subj=user1:group1 obj=file#user2:group2#0000 res=fail errno=1
#path traversal
+ linkat subj=user1:group1 obj=file#user1:group1#0700 res=pass \
         objdir=dir#root:root#0001
+ linkat subj=user1:group1 obj=file#user1:group1#0700 res=fail \
         objdir=dir#root:root#0776
#special - mode is ignored for the owner
+ linkat subj=user1:group1 obj=file#user1:root#0000 res=pass
#special - the destination dir needs to be writable+searchable
+ linkat subj=user1:group1 obj=file#user1:group1#0700 res=pass \
         newpath=dir#root:root#0003
+ linkat subj=user1:group1 obj=file#user1:group1#0700 res=fail \
         newpath=dir#root:root#0775
+ linkat subj=user1:group1 obj=file#user1:group1#0700 res=fail \
         newpath=dir#root:root#0776

### execve
# No capability can grant exec privs if file mode doesn't have 'x',
# not even CAP_DAC_OVERRIDE. Hence res=fail in both cases.
#
#user
+ execve subj=user1:group1 obj=file#user1:group1#0700 res=pass
+ execve subj=user1:group1 obj=file#user2:group1#0700 res=fail
#group
+ execve subj=user1:group1 obj=file#user2:group1#0070 res=pass
+ execve subj=user1:group1 obj=file#user2:group2#0070 res=fail
#suppl. groups
+ execve subj=user1:group1,group2 obj=file#user2:group2#0070 res=pass
+ execve subj=user1:group1,group3 obj=file#user2:group2#0070 res=fail
#mode
+ execve subj=user1:group1 obj=file#user1:group1#0700 res=pass
+ execve subj=user1:group1 obj=file#user1:group1#0000 res=fail
#acl
+ execve subj=user1:group1 obj=file#user2:group2#0000#u:user1:rwx res=pass
+ execve subj=user1:group1 obj=file#user2:group2#0777#u:user1:--- res=fail
#filecap
+ execve subj=user1:group1 obj=file#user2:group2#0000 res=fail filecap=all+ep
+ execve subj=user1:group1 obj=file#user2:group2#0000 res=fail
#path traversal
+ execve subj=user1:group1 obj=file#user1:group1#0700 res=pass \
         objdir=dir#root:root#0001
+ execve subj=user1:group1 obj=file#user1:group1#0700 res=fail \
         objdir=dir#root:root#0776

### listxattr
# This syscall should ignore any file access permissions since it retrieves
# the necessary info from the associated inode, to which permissions are
# granted via parent directory search permission (path traversal).
# Hence res=pass almost everywhere (except path traversal).
#
#user
+ listxattr subj=user1:group1 obj=file#user1:group1#0700 res=pass
+ listxattr subj=user1:group1 obj=file#user2:group1#0700 res=pass
#group
+ listxattr subj=user1:group1 obj=file#user2:group1#0070 res=pass
+ listxattr subj=user1:group1 obj=file#user2:group2#0070 res=pass
#suppl. groups
+ listxattr subj=user1:group1,group2 obj=file#user2:group2#0070 res=pass
+ listxattr subj=user1:group1,group3 obj=file#user2:group2#0070 res=pass
#mode
+ listxattr subj=user1:group1 obj=file#user1:group1#0700 res=pass
+ listxattr subj=user1:group1 obj=file#user1:group1#0000 res=pass
#acl
+ listxattr subj=user1:group1 obj=file#user2:group2#0000#u:user1:rwx res=pass
+ listxattr subj=user1:group1 obj=file#user2:group2#0777#u:user1:--- res=pass
#filecap
+ listxattr subj=user1:group1 obj=file#user2:group2#0000 res=pass \
            filecap=all+ep
+ listxattr subj=user1:group1 obj=file#user2:group2#0000 res=pass
#path traversal
+ listxattr subj=user1:group1 obj=file#user1:group1#0700 res=pass \
            objdir=dir#root:root#0001
+ listxattr subj=user1:group1 obj=file#user1:group1#0700 res=fail \
            objdir=dir#root:root#0776

### llistxattr
# See listxattr.
#
#user
+ llistxattr subj=user1:group1 obj=file#user1:group1#0700 res=pass
+ llistxattr subj=user1:group1 obj=file#user2:group1#0700 res=pass
#group
+ llistxattr subj=user1:group1 obj=file#user2:group1#0070 res=pass
+ llistxattr subj=user1:group1 obj=file#user2:group2#0070 res=pass
#suppl. groups
+ llistxattr subj=user1:group1,group2 obj=file#user2:group2#0070 res=pass
+ llistxattr subj=user1:group1,group3 obj=file#user2:group2#0070 res=pass
#mode
+ llistxattr subj=user1:group1 obj=file#user1:group1#0700 res=pass
+ llistxattr subj=user1:group1 obj=file#user1:group1#0000 res=pass
#acl
+ llistxattr subj=user1:group1 obj=file#user2:group2#0000#u:user1:rwx res=pass
+ llistxattr subj=user1:group1 obj=file#user2:group2#0777#u:user1:--- res=pass
#filecap
+ llistxattr subj=user1:group1 obj=file#user2:group2#0000 res=pass \
             filecap=all+ep
+ llistxattr subj=user1:group1 obj=file#user2:group2#0000 res=pass
#path traversal
+ llistxattr subj=user1:group1 obj=file#user1:group1#0700 res=pass \
             objdir=dir#root:root#0001
+ llistxattr subj=user1:group1 obj=file#user1:group1#0700 res=fail \
             objdir=dir#root:root#0776

### lgetxattr
# See listxattr.
#
#user
+ lgetxattr subj=user1:group1 obj=file#user1:group1#0700 res=pass
+ lgetxattr subj=user1:group1 obj=file#user2:group1#0700 res=pass
#group
+ lgetxattr subj=user1:group1 obj=file#user2:group1#0070 res=pass
+ lgetxattr subj=user1:group1 obj=file#user2:group2#0070 res=pass
#suppl. groups
+ lgetxattr subj=user1:group1,group2 obj=file#user2:group2#0070 res=pass
+ lgetxattr subj=user1:group1,group3 obj=file#user2:group2#0070 res=pass
#mode
+ lgetxattr subj=user1:group1 obj=file#user1:group1#0700 res=pass
+ lgetxattr subj=user1:group1 obj=file#user1:group1#0000 res=pass
#acl
+ lgetxattr subj=user1:group1 obj=file#user2:group2#0000#u:user1:rwx res=pass
+ lgetxattr subj=user1:group1 obj=file#user2:group2#0777#u:user1:--- res=pass
#filecap
+ lgetxattr subj=user1:group1 obj=file#user2:group2#0000 res=pass \
            filecap=all+ep
+ lgetxattr subj=user1:group1 obj=file#user2:group2#0000 res=pass
#path traversal
+ lgetxattr subj=user1:group1 obj=file#user1:group1#0700 res=pass \
            objdir=dir#root:root#0001
+ lgetxattr subj=user1:group1 obj=file#user1:group1#0700 res=fail \
            objdir=dir#root:root#0776

### stat
# No permissions are required on the file itself, execute (search) permission
# is required on all of the directories in path that lead to the file (path
# traversal). Thus the only way to obtain res=fail (forbidden access) is in
# path traversal test.
#
#user
+ stat subj=user1:group1 obj=file#user1:group1#0700 res=pass
+ stat subj=user1:group1 obj=file#user2:group1#0700 res=pass
#group
+ stat subj=user1:group1 obj=file#user2:group1#0070 res=pass
+ stat subj=user1:group1 obj=file#user2:group2#0070 res=pass
#suppl. groups
+ stat subj=user1:group1,group2 obj=file#user2:group2#0070 res=pass
+ stat subj=user1:group1,group3 obj=file#user2:group2#0070 res=pass
#mode
+ stat subj=user1:group1 obj=file#user1:group1#0700 res=pass
+ stat subj=user1:group1 obj=file#user1:group1#0000 res=pass
#acl
+ stat subj=user1:group1 obj=file#user2:group2#0000#u:user1:rwx res=pass
+ stat subj=user1:group1 obj=file#user2:group2#0777#u:user1:--- res=pass
#filecap
+ stat subj=user1:group1 obj=file#user2:group2#0000 res=pass \
       filecap=all+ep
+ stat subj=user1:group1 obj=file#user2:group2#0000 res=pass
#path traversal
+ stat subj=user1:group1 obj=file#user1:group1#0700 res=pass \
       objdir=dir#root:root#0001
+ stat subj=user1:group1 obj=file#user1:group1#0700 res=fail \
       objdir=dir#root:root#0776

### lstat
# See stat.
#
#user
+ lstat subj=user1:group1 obj=file#user1:group1#0700 res=pass
+ lstat subj=user1:group1 obj=file#user2:group1#0700 res=pass
#group
+ lstat subj=user1:group1 obj=file#user2:group1#0070 res=pass
+ lstat subj=user1:group1 obj=file#user2:group2#0070 res=pass
#suppl. groups
+ lstat subj=user1:group1,group2 obj=file#user2:group2#0070 res=pass
+ lstat subj=user1:group1,group3 obj=file#user2:group2#0070 res=pass
#mode
+ lstat subj=user1:group1 obj=file#user1:group1#0700 res=pass
+ lstat subj=user1:group1 obj=file#user1:group1#0000 res=pass
#acl
+ lstat subj=user1:group1 obj=file#user2:group2#0000#u:user1:rwx res=pass
+ lstat subj=user1:group1 obj=file#user2:group2#0777#u:user1:--- res=pass
#filecap
+ lstat subj=user1:group1 obj=file#user2:group2#0000 res=pass \
        filecap=all+ep
+ lstat subj=user1:group1 obj=file#user2:group2#0000 res=pass
#path traversal
+ lstat subj=user1:group1 obj=file#user1:group1#0700 res=pass \
        objdir=dir#root:root#0001
+ lstat subj=user1:group1 obj=file#user1:group1#0700 res=fail \
        objdir=dir#root:root#0776

### statfs
# See stat.
#
#user
+ statfs subj=user1:group1 obj=file#user1:group1#0700 res=pass
+ statfs subj=user1:group1 obj=file#user2:group1#0700 res=pass
#group
+ statfs subj=user1:group1 obj=file#user2:group1#0070 res=pass
+ statfs subj=user1:group1 obj=file#user2:group2#0070 res=pass
#suppl. groups
+ statfs subj=user1:group1,group2 obj=file#user2:group2#0070 res=pass
+ statfs subj=user1:group1,group3 obj=file#user2:group2#0070 res=pass
#mode
+ statfs subj=user1:group1 obj=file#user1:group1#0700 res=pass
+ statfs subj=user1:group1 obj=file#user1:group1#0000 res=pass
#acl
+ statfs subj=user1:group1 obj=file#user2:group2#0000#u:user1:rwx res=pass
+ statfs subj=user1:group1 obj=file#user2:group2#0777#u:user1:--- res=pass
#filecap
+ statfs subj=user1:group1 obj=file#user2:group2#0000 res=pass \
         filecap=all+ep
+ statfs subj=user1:group1 obj=file#user2:group2#0000 res=pass
#path traversal
+ statfs subj=user1:group1 obj=file#user1:group1#0700 res=pass \
         objdir=dir#root:root#0001
+ statfs subj=user1:group1 obj=file#user1:group1#0700 res=fail \
         objdir=dir#root:root#0776

#### mq_unlink tests
# No permissions are required on the queue itself but both write an search
# permissions is required on a mq directory (/dev/mqueue). Please notice that
# mq directory has sticky bit by default (1777) and hence we use objdir=mqdir
# within each test to remove this bit (which is tested afterwards in path
# traversal tests).
#
#user
+ mq_unlink subj=user1:group1 obj=mq#user1:group1#0000 res=pass \
            objdir=mqdir#root:root#0777
+ mq_unlink subj=user1:group1 obj=mq#user2:group1#0777 res=pass \
            objdir=mqdir#root:root#0777
#group
+ mq_unlink subj=user1:group1 obj=mq#user2:group1#0000 res=pass \
            objdir=mqdir#root:root#0777
+ mq_unlink subj=user1:group1 obj=mq#user2:group2#0777 res=pass \
            objdir=mqdir#root:root#0777
#suppl. groups
+ mq_unlink subj=user1:group1,group2 obj=mq#user2:group2#0000 res=pass \
            objdir=mqdir#root:root#0777
+ mq_unlink subj=user1:group1,group3 obj=mq#user2:group2#0777 res=pass \
            objdir=mqdir#root:root#0777
#mode
+ mq_unlink subj=user1:group1 obj=mq#user1:group1#0000 res=pass \
            objdir=mqdir#root:root#0777
+ mq_unlink subj=user1:group1 obj=mq#user1:group1#0777 res=pass \
            objdir=mqdir#root:root#0777
#acl
+ mq_unlink subj=user1:group1 obj=mq#user2:group2#0000#u:user1:--- res=pass \
            objdir=mqdir#root:root#0777
+ mq_unlink subj=user1:group1 obj=mq#user2:group2#0777#u:user1:rwx res=pass \
            objdir=mqdir#root:root#0777
#filecap
+ mq_unlink subj=user1:group1 obj=mq#user2:group2#0000 res=pass \
            filecap=all+ep objdir=mqdir#root:root#0777
+ mq_unlink subj=user1:group1 obj=mq#user2:group2#0000 res=pass \
            objdir=mqdir#root:root#0777
#path traversal + sticky bit
+ mq_unlink subj=user1:group1 obj=mq#user1:group1#0000 res=pass \
            objdir=mqdir#root:root#0003
+ mq_unlink subj=user1:group1 obj=mq#user1:group1#0777 res=fail \
            objdir=mqdir#root:root#0774
# special syscall-specific cases (sticky bit)
+ mq_unlink subj=user1:group1 obj=mq#user2:group1#0777 res=fail \
            objdir=mqdir#root:root#1003

### utimes
# Changing last access and modification timestamps is permitted when:
# a) either the process has appropriate privileges, or the effective user
#    ID equals the user ID of the file,
# b) or times are NULL and the process has write permission for the file.
#
#user
+ utimes subj=user1:group1 obj=file#user1:group1#0000 res=pass \
         set_atime=1 set_mtime=1
+ utimes subj=user1:group1 obj=file#user2:group1#0777 res=fail errno=1 \
         set_atime=1 set_mtime=1
#group
+ utimes subj=user1:group1 obj=file#user2:group1#0777 res=fail errno=1 \
         set_atime=1 set_mtime=1
+ utimes subj=user1:group1 obj=file#user2:group2#0777 res=fail errno=1 \
         set_atime=1 set_mtime=1
#suppl. groups
+ utimes subj=user1:group1,group2 obj=file#user2:group2#0777 res=fail errno=1 \
         set_atime=1 set_mtime=1
+ utimes subj=user1:group1,group3 obj=file#user2:group2#0777 res=fail errno=1 \
         set_atime=1 set_mtime=1
#mode
+ utimes subj=user1:group1 obj=file#user1:group1#0700 res=pass \
         set_atime=1 set_mtime=1
+ utimes subj=user1:group1 obj=file#user1:group1#0000 res=pass \
         set_atime=1 set_mtime=1
#acl
+ utimes subj=user1:group1 obj=file#user2:group2#0000#u:user1:rwx res=fail \
         errno=1 set_atime=1 set_mtime=1
+ utimes subj=user1:group1 obj=file#user2:group2#0777#u:user1:--- res=fail \
         errno=1 set_atime=1 set_mtime=1
#filecap
+ utimes subj=user1:group1 obj=file#user2:group2#0000 res=pass \
         filecap=all+ep set_atime=1 set_mtime=1
+ utimes subj=user1:group1 obj=file#user2:group2#0777 res=fail errno=1 \
         set_atime=1 set_mtime=1
#path traversal
+ utimes subj=user1:group1 obj=file#user1:group1#0000 res=pass \
         objdir=dir#root:root#0001 set_atime=1 set_mtime=1
+ utimes subj=user1:group1 obj=file#user1:group1#0777 res=fail \
         objdir=dir#root:root#0776 set_atime=1 set_mtime=1
# special syscall-specific cases (b)
+ utimes subj=user1:group1 obj=file#user2:group2#0002 res=pass
+ utimes subj=user1:group1 obj=file#user2:group2#0775 res=fail
+ utimes subj=user1:group1 obj=file#user2:group2#0000#u:user1:-w- res=pass
+ utimes subj=user1:group1 obj=file#user2:group2#0000#u:user1:r-x res=fail

### utimensat
# To make any change other than setting both timestamps to the current time
# it mulst apply either:
#
# A1. the caller's effective user ID must match the owner of the file; or
# A2. the caller must be privileged (ie. CAP_{FOWNER,DAC_OVERRIDE}
#
# [Special A] To set both file timestamps to the current time, either
# the caller must have write access to the file or A1 or A2.
#
# [Special B] If both file timestampts are specified as UTIME_OMIT, then no
# file ownership or permission checks are performed.
#
# Moreover, for path traversal not only search is needed but also read access.
#
#user
+ utimensat subj=user1:group1 obj=file#user1:group1#0000 res=pass \
            set_atime=1 set_mtime=1
+ utimensat subj=user1:group1 obj=file#user2:group1#0777 res=fail errno=1 \
            set_atime=1 set_mtime=1
#group
+ utimensat subj=user1:group1 obj=file#user2:group1#0777 res=fail errno=1 \
            set_atime=1 set_mtime=1
+ utimensat subj=user1:group1 obj=file#user2:group2#0777 res=fail errno=1 \
            set_atime=1 set_mtime=1
#suppl. groups
+ utimensat subj=user1:group1,group2 obj=file#user2:group2#0777 res=fail \
            errno=1 set_atime=1 set_mtime=1
+ utimensat subj=user1:group1,group3 obj=file#user2:group2#0777 res=fail \
            errno=1 set_atime=1 set_mtime=1
#mode
+ utimensat subj=user1:group1 obj=file#user2:group2#0777 res=fail errno=1 \
            set_atime=1 set_mtime=1
#acl
+ utimensat subj=user1:group1 obj=file#user2:group2#0000#u:user1:rwx res=fail \
            errno=1 set_atime=1 set_mtime=1
+ utimensat subj=user1:group1 obj=file#user2:group2#0777#u:user1:--- res=fail \
            errno=1 set_atime=1 set_mtime=1
#filecap
+ utimensat subj=user1:group1 obj=file#user2:group2#0000 res=pass \
         filecap=all+ep set_atime=1 set_mtime=1
+ utimensat subj=user1:group1 obj=file#user2:group2#0777 res=fail errno=1 \
         set_atime=1 set_mtime=1
#path traversal
+ utimensat subj=user1:group1 obj=file#user1:group1#0000 res=pass \
            objdir=dir#root:root#0001 set_atime=1 set_mtime=1
+ utimensat subj=user1:group1 obj=file#user1:group1#0777 res=fail \
            objdir=dir#root:root#0776 set_atime=1 set_mtime=1
# special syscall-specific cases
# [Special A - Case 1 (other cases covered above)]
+ utimensat subj=user1:group1 obj=file#user2:group2#0002 res=pass \
            set_atime="UTIME_NOW" set_mtime="UTIME_NOW"
+ utimensat subj=user1:group1 obj=file#user2:group2#0775 res=fail \
            set_atime="UTIME_NOW" set_mtime="UTIME_NOW"
+ utimensat subj=user1:group1 obj=file#user2:group2#0000#u:user1:-w- res=pass \
            set_atime="UTIME_NOW" set_mtime="UTIME_NOW"
+ utimensat subj=user1:group1 obj=file#user2:group2#0777#u:user1:r-x res=fail \
            set_atime="UTIME_NOW" set_mtime="UTIME_NOW"
# [Special B]
+ utimensat subj=user1:group1 obj=file#user2:group2#0000 res=pass \
            set_atime="UTIME_OMIT" set_mtime="UTIME_OMIT"
+ utimensat subj=user1:group1 obj=file#user2:group2#0000#u:user1:--- res=pass \
            set_atime="UTIME_OMIT" set_mtime="UTIME_OMIT"

# vim: sts=4 sw=4 et :
