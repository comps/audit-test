###############################################################################
#   Copyright (c) 2014 Red Hat, Inc. All rights reserved.
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of version 2 the GNU General Public License as
#   published by the Free Software Foundation.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
###############################################################################

PATH="$TOPDIR/syscalls-ns/tests/helpers:$PATH"

function run_test {
    declare status sc="$1" ns="$2"
    [ "$sc" -a "$ns" ] || return 2
    shift 2

    # Force the audit log to rotate
    rotate_audit_logs || return 2

    # Run the test
    cd "tests/$ns" || return 2
    # if syscall-specific test exists for the given $ns, use it,
    # else default to a generic $ns test
    if [ -f "test_${sc}.bash" ]; then
        "./test_${sc}.bash"
    else
        "./generic.bash" "$sc"
    fi
    status=$?

    return $status
}

eval "function run+ $(type + | sed '1,2d')"
function + {
    local sc="$1" arg=
    shift

    # if the syscall is not relevant for this env, skip it
    sc_is_relevant "$sc" || return

    for arg in "$@"; do
        run+ "$sc" "$arg"
    done;
}

# HOW IT WORKS
#
# The `+' function is overloaded to transform a single line of
#   + syscall-name mnt ipc pid
# into multiple calls of the original `+' function, aliased to `run+',
#   + syscall-name mnt
#   + syscall-name ipc
#   + syscall-name pid
# generating 3 tests when using run.bash (--list, running single tests, ..).
#
# The `run_test' function is then overloaded to swap the two arguments,
# so that (essentially) the following is executed:
#   cd tests/mnt/; ./generic.bash syscall-name
#   cd tests/ipc/; ./generic.bash syscall-name
#   cd tests/pid/; ./generic.bash syscall-name
# or, if a syscall-specific test is found (ie. test_syscall-name.bash),
# it is executed instead of the generic test above:
#   cd tests/mnt/; ./test_syscall-name.bash
#   cd tests/ipc/; ./test_syscall-name.bash
#   cd tests/pid/; ./test_syscall-name.bash
# (both mechanisms can be combined for a single syscall, ie. syscall-specific
#  test for pid with a generic test for mnt namespace)
#

+ acct mnt
+ bind mnt
+ chdir mnt
+ chmod mnt
+ chown mnt
+ chroot mnt
+ creat mnt
+ execve mnt
+ fanotify_mark mnt
+ fchmodat mnt
+ fchownat mnt
+ fstatat64 mnt
+ futimesat mnt
+ getxattr mnt
+ inotify_add_watch mnt
+ lchown mnt
+ lgetxattr mnt
+ link mnt
+ linkat mnt
+ listxattr mnt
+ llistxattr mnt
+ lremovexattr mnt
+ lsetxattr mnt
+ lstat mnt
+ mkdir mnt
+ mkdirat mnt
+ mknod mnt
+ mknodat mnt
+ mount mnt
+ newfstatat mnt
+ open mnt
+ openat mnt
+ pivot_root mnt
+ readlink mnt
+ readlinkat mnt
+ removexattr mnt
+ rename mnt
+ renameat mnt
+ rmdir mnt
+ setxattr mnt
+ stat mnt
+ statfs mnt
+ swapoff mnt
+ swapon mnt
+ symlink mnt
+ symlinkat mnt
+ truncate mnt
+ umount mnt
+ umount2 mnt
+ unlink mnt
+ unlinkat mnt
+ utime mnt
+ utimes mnt
+ utimensat mnt

+ setdomainname uts
+ sethostname uts
+ uname uts

+ mq_open ipc
+ mq_unlink ipc
+ msgctl ipc
+ msgget ipc
+ msgrcv ipc
+ msgsnd ipc
+ semctl ipc
+ semget ipc
+ semop ipc
+ semtimedop ipc
+ shmat ipc
+ shmctl ipc
+ shmget ipc

+ clone pid
+ fork pid
+ get_robust_list pid
+ getpid pid
+ getppid pid
+ getsid pid
+ gettid pid
+ kill pid
+ migrate_pages pid
+ move_pages pid
+ prlimit64 pid
+ process_vm_readv pid
+ process_vm_writev pid
+ ptrace pid
+ reboot pid
+ sched_getaffinity pid
+ sched_getparam pid
+ sched_getscheduler pid
+ sched_rr_get_interval pid
+ sched_setaffinity pid
+ sched_setparam pid
+ sched_setscheduler pid
+ setpriority pid
+ tgkill pid
+ tkill pid

# vim: sts=4 sw=4 et :
