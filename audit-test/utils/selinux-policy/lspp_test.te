###############################################################################
# (c) Copyright Hewlett-Packard Development Company, L.P., 2007
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of version 2 the GNU General Public License as
#   published by the Free Software Foundation.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
###############################################################################

#######
#
# LSPP test SELinux policy module
#
#

define(`ROLES_ALL',`sysadm_r secadm_r auditadm_r staff_r')

###
#
# module information
#

#
# In this section include the general SELinux reference policy bits, such as
# the policy_module() and gen_require() statements.
#

policy_module(lspp_test,6.3.14)

# we really shouldn't be accessing these policy constructs directly but there
# isn't always a policy interface available for what we want to do, so just
# include them in the gen_require() statement and move on
gen_require(`
        # roles
        role sysadm_r, secadm_r, auditadm_r, staff_r;
        # attributes
        attribute domain, virt_domain;
        # domains
        type auditd_t, inetd_t, initrc_t, passwd_t, virtd_t, default_t;
        # objects
        type auditd_log_t, sysadm_lpr_t, ipsec_spd_t;
	# more objects for network controls
	type lo_netif_t, netif_t, node_t, unlabeled_t, netlabel_peer_t;
	type kernel_t, inetd_t, sshd_t, ping_t;
	# Needed for login
	type staff_t;
	# more objects needed for strace
	type staff_t, namespace_init_t, ssh_t, user_t, setfiles_t, hostname_t;
	# more objects needed for dmcrypt and cryptsetup
	type lvm_t, fsadm_t, udev_t;
	# more objects needed for cupsd and lpr
	type cupsd_t, initrc_t, portreserve_t;
	# more objects needed for ipsec
	type ifconfig_t, ipsec_t;
	# needed for mls cron (maybe)
	type tmp_t, crond_t, cronjob_t;
')
###
#
# types and attributes
#

#
# In this section include any news domains/types used by this policy module
# as well as any reference policy interface calls used to assign basic
# qualities, such as type attributes, to these new domains/types.
#

# all domains
attribute lspp_domains;
# all test domains, i.e. lspp_test_*_t
attribute lspp_test_domains;

# harness (MLS overrides)
userdom_admin_user_template(lspp_harness)
typeattribute lspp_harness_t lspp_domains;
type lspp_harness_exec_t;
corecmd_executable_file(lspp_harness_exec_t)
domain_entry_file(lspp_harness_t,lspp_harness_exec_t)

# generic test domain (no MLS overrides)
userdom_unpriv_user_template(lspp_test_generic)
typeattribute lspp_test_generic_t lspp_test_domains, lspp_domains;
type lspp_test_generic_exec_t;
corecmd_executable_file(lspp_test_generic_exec_t)
domain_entry_file(lspp_test_generic_t,lspp_test_generic_exec_t)

# netlabel test (no MLS overrides)
userdom_unpriv_user_template(lspp_test_netlabel)
typeattribute lspp_test_netlabel_t lspp_test_domains, lspp_domains;

# ipsec test (no MLS overrides)
userdom_unpriv_user_template(lspp_test_ipsec)
typeattribute lspp_test_ipsec_t lspp_test_domains, lspp_domains;

# all directories
attribute lspp_directories;

# directory types
type lspp_test_harness_dir_t, lspp_directories;
files_type(lspp_test_harness_dir_t)
type lspp_test_dir_t, lspp_directories;
files_type(lspp_test_dir_t)
type lspp_test_exec_dir_t, lspp_directories;
files_type(lspp_test_exec_dir_t)

# file types
type lspp_test_file_t;
files_type(lspp_test_file_t)
type lspp_test_conf_t;
files_type(lspp_test_conf_t)
type lspp_test_output_t;
files_type(lspp_test_output_t)

###
#
# role policy
#

#
# In this section include any new roles used by this policy module as well as
# any role allow rules to define the transition between these roles and
# existing roles.
#

role lspp_test_r types domain;
dominance {
       role lspp_test_r {
               role sysadm_r;
               role secadm_r;
               role auditadm_r;
               role staff_r;
       }
}

# add the lspp test types to the generic object role
role system_r types lspp_domains;

# allow role transitions between the test role and all other roles
allow lspp_test_r { ROLES_ALL };
allow { ROLES_ALL } lspp_test_r;

###
#
# object policy
#

#
# In this section include any allow rules or reference policy interface calls
# that affect the types/objects defined in this policy module.
#

# allow every domain to read the test directory
allow domain lspp_directories:dir list_dir_perms;

# make the log files trusted objects
mls_trusted_object(lspp_test_output_t)

# make test harness created objects (i.e. std{in,out,err} fds, etc)
# trusted objects
mls_trusted_object(lspp_harness_t)

# default file types
type_transition lspp_domains lspp_test_harness_dir_t:file lspp_harness_exec_t;
type_transition lspp_domains lspp_test_dir_t:file lspp_test_output_t;
type_transition lspp_domains lspp_test_exec_dir_t:file lspp_test_generic_exec_t;
type_transition lspp_domains lspp_test_dir_t:fifo_file lspp_test_file_t;

###
#
# domain policy
#

#
# In this section, which spans to the end of the policy module, include any
# allow rules or reference policy interface calls that affect the domains
# defined in this policy module.  For example, any allow rule with a subject
# defined within this policy module should most likely be in this section
# assuming it doesn't fit within any of the other sections elsewhere in this
# module.
#

##
# regular policy additions
#

#
# These are policy changes which only affect the base policy domains/types
# but are needed for the LSPP test suite.  Additions here should be heavily
# scrutinized and kept to a bare minimum.
#

# allow the inetd_t domain to bind to any port, needed for the test daemon
corenet_tcp_bind_generic_port(inetd_t)
corenet_udp_bind_generic_port(inetd_t)

# allow auditd to use temporary filesystems for logging
fs_associate_tmpfs(auditd_log_t)
files_search_tmp(auditd_t)

##
# harness domain
#

# transition to the harness domain automatically when running harness apps
domain_auto_trans(domain,lspp_harness_exec_t,lspp_harness_t)

# allow manual transitions to any other domain on the system
allow lspp_harness_t domain:process transition;

# give the harness domain mls override privleges
mls_file_read_all_levels(lspp_harness_t)
mls_file_write_all_levels(lspp_harness_t)
mls_file_upgrade(lspp_harness_t)
mls_file_downgrade(lspp_harness_t)
mls_fd_use_all_levels(lspp_harness_t)
mls_fd_share_all_levels(lspp_harness_t)
mls_socket_read_all_levels(lspp_harness_t);
mls_socket_write_all_levels(lspp_harness_t);
mls_net_receive_all_levels(lspp_harness_t);
mls_sysvipc_read_all_levels(lspp_harness_t)
mls_sysvipc_write_all_levels(lspp_harness_t)
mls_rangetrans_source(lspp_harness_t)
mls_process_read_up(lspp_harness_t)
mls_process_write_down(lspp_harness_t)
mls_process_set_level(lspp_harness_t)
mls_rangetrans_source(lspp_harness_t)
mls_context_translate_all_levels(lspp_harness_t)

# give the harness domain "unconfined" access
unconfined_domain_noaudit(lspp_harness_t)

# give the harness domain newrole access
seutil_run_newrole(lspp_harness_t,lspp_test_r,{ ttynode ptynode })
auth_use_pam(lspp_harness_t)

# give the harness domain auditctl access
logging_run_auditctl(lspp_harness_t,lspp_test_r,{ ttynode ptynode })

# give the harness domain access to run_init
seutil_run_runinit(lspp_harness_t,lspp_test_r,{ ttynode ptynode })
allow initrc_t lspp_harness_t:fd use;

# give the harness domain access to the local login domain
locallogin_domtrans(lspp_harness_t)
allow local_login_t user_devpts_t:chr_file { read write ioctl relabelfrom relabelto setattr getattr open };
allow local_login_t devpts_t:dir search;
# the following is needed for the libpam/login test but seems to be related
# to some questionable filesystem namespace behavior so maybe this is
# temporary.
allow local_login_t default_t:dir { read getattr open mounton relabelto rmdir setattr };
allow staff_t lspp_test_output_t:file { write open };
allow local_login_t var_t:dir mounton;

# give the harness domain access to the sysadm lpr domain
allow sysadm_lpr_t user_devpts_t:chr_file { read write };

# give the harness domain access to all the other test domain's associations
allow lspp_harness_t lspp_domains:association { setcontext recvfrom };

# give the harness domain access to the passwd type
role lspp_test_r types passwd_t;

##
# generic test domain
#

# transition to the generic test domain by default when running tests
domain_auto_trans(lspp_harness_t,lspp_test_generic_exec_t,lspp_test_generic_t)

# give the test domain "unconfined" access
unconfined_domain_noaudit(lspp_test_generic_t)

##
# virtualisation domain
#

# allow libvirt to create, read, write, delete, and relabel files with the
# default file type.
files_manage_default_dirs(virtd_t)
files_manage_default_files(virtd_t)
relabel_dirs_pattern(virtd_t, default_t, default_t)
relabel_files_pattern(virtd_t, default_t, default_t)

# allow the virtualisation domain to send child terminated signals to the
# harness domain
allow virt_domain lspp_harness_t:process sigchld;

# temporary fix to allow the virtualisation domain to access vhost devices

gen_require(`
        type vhost_device_t;
')

mls_trusted_object(vhost_device_t)

# add dynamic labeling "support" to libvirt:

mls_file_upgrade(virtd_t)
mls_file_downgrade(virtd_t)

##
# netlabel test domain
#

# give the test domain "unconfined" access
unconfined_domain_noaudit(lspp_test_netlabel_t)

# override privilages for the test domain for file writes
mls_file_write_all_levels(lspp_test_netlabel_t)

##
# ipsec test domain
#

# give the test domain "unconfined" access
unconfined_domain_noaudit(lspp_test_ipsec_t)

# override privilages for the test domain for file writes
mls_file_write_all_levels(lspp_test_ipsec_t)

# give the test domain the ability to match against the SPD entries
allow lspp_test_ipsec_t ipsec_spd_t:association polmatch;

# network controls for interfaces

allow unlabeled_t lo_netif_t:netif ingress;
allow unlabeled_t unlabeled_t:netif ingress;
allow netlabel_peer_t netif_t:netif ingress;
allow netlabel_peer_t unlabeled_t:netif ingress;
allow netlabel_peer_t node_t:node recvfrom;
allow netlabel_peer_t lo_netif_t:netif ingress;
allow kernel_t unlabeled_t:netif egress;

# network controls for the test harness and tests

allow lspp_harness_t unlabeled_t:netif egress;
allow lspp_harness_t netlabel_peer_t:peer recv;

allow lspp_test_ipsec_t unlabeled_t:netif egress;
allow lspp_test_ipsec_t netlabel_peer_t:peer recv;

allow lspp_test_generic_t unlabeled_t:netif egress;
allow lspp_test_generic_t netlabel_peer_t:peer recv;

allow lspp_test_netlabel_t unlabeled_t:netif egress;
allow lspp_test_netlabel_t netlabel_peer_t:peer recv;

# network controls for specific daemons and controls

allow inetd_t lo_netif_t:netif egress;
allow inetd_t unlabeled_t:netif egress;

allow sshd_t unlabeled_t:peer recv;
allow sshd_t unlabeled_t:netif egress;
allow unlabeled_t sshd_t:netif egress;
allow sshd_t lo_netif_t:netif egress;

allow ping_t unlabeled_t:netif egress;
allow unlabeled_t ping_t:netif egress;

# needed for strace to work in crypto/ssh_sym test
allow namespace_init_t lspp_harness_t:process sigchld;
allow setfiles_t lspp_harness_t:process sigchld;
allow sshd_t lspp_harness_t:process sigchld;
allow staff_t lspp_harness_t:process sigchld;
allow user_t lspp_harness_t:process sigchld;
allow ssh_t lspp_harness_t:process sigchld;
allow hostname_t lspp_harness_t:process sigchld;

# needed for crypto/ssh tests
allow sshd_t lspp_harness_t:fifo_file write;
allow ssh_t lo_netif_t:netif egress;

# needed for dmcrypt to work in crypto/cryptsetup_access test
allow lvm_t lspp_harness_t:sem { read write unix_write associate unix_read };
allow udev_t fsadm_t:process { siginh noatsecure rlimitinh };
allow udev_t lvm_t:process { siginh noatsecure rlimitinh };

# needed for lpr and nc to pass in trustedprograms/lpr_* tests
allow cupsd_t lo_netif_t:netif egress;
allow cupsd_t lspp_harness_t:fifo_file write;
allow initrc_t lspp_harness_t:fifo_file write;
allow portreserve_t lspp_harness_t:fifo_file write;
allow udev_t lspp_harness_t:fifo_file write;

# needed for ipsec to be able to start via run_init
allow ifconfig_t lspp_harness_t:association setcontext;
allow ipsec_t lspp_harness_t:association setcontext;

# needed for ipsec to load ipsec.conf with ipsec_spd_t policy lines
allow ipsec_t ipsec_spd_t:association setcontext;
allow ipsec_t lspp_test_ipsec_t:association setcontext;

# needed for ip commands that get initiated during tests
allow ifconfig_t lspp_test_ipsec_t:association setcontext;

# needed for cron tests - this may be temporary as if these
# are really needed, they're probably needed in the mls policy
allow crond_t cronjob_t:key create;
allow cronjob_t tmp_t:dir { add_name write };
allow cronjob_t tmp_t:file { write create open ioctl getattr };
allow cronjob_t user_home_dir_t:dir read;
