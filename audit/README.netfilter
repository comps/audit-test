About netfilter tests
---------------------

The netfilter tests reside in the sub-directories netfilter and netfilebt of
the audit-test suite. The tests of the iptables and ip6tables reside in
netfilter, and the bridge table filtering tests are in netfilebt. The use
of remote network server running the lblnet_tst_server is required for these
tests.

The iptables and ip6tables tests have a large number of the tests that run
over the local loopback device to a locally running lblnet_tst_server.
Some of the tests for iptables and ip6tables are run over the primary Ethernet
device against the remote server executing the lblnet_tst_server application.
The locally run lblnet_tst_server which the iptables and ip6tables tests
utilize is automatically started and stopped in the run.conf file, however
the lblnet_tst_server that runs on the remote server must be started before
any of the tests can begin as connectivity to it is tested prior to the
start of any tests. If connectivity cannot be established the test will
error out.

You should read the README.netwk_svr for instructions on how to setup the
remote network server.


Network configuration
---------------------

To run the netfilter tests you need to configure two separate networks between
TOE and remote network server (referred to as the netserver or NS in this
documentation). These networks are in this documentation referred as primary
and secondary network. The secondary network is required only by the ebtables
tests which also require the creation of a bridge (logical) device on the TOE
to which the secondary network's Ethernet (physical) device on this machine
is enslaved. Please note that the both IPv4 and IPv6 needs to be properly
configured on the devices.

A working network configuration with examples of simple IPv4/IPv6 addresses
is shown on the picture below. Please note that the interfaces can be connected
directly via a cross-cable or connected to the same LAN via Ethernet switches.

Please be aware that some network cards may be renamed by udev from the
"traditional" eth* network interface name to em* or also some other. The em*
renaming will be the default in RHEL7 for all network interfaces.


                                +~~~~~~~~~~~+
                                |  primary  |
                                |  network  |
                                +~~~~~~~~~~~+
         +----------------+    /             \    +----------------+
         | TOE |          |   /               \   |           | NS |
         |-----+          |  /                 \  |           +----|
         |           eth3 |>>   NOTE:           <<| eth0           |
         |  IPv4 10.0.0.2 |     Device eth4       | IPv4 10.0.0.1  |
         |  IPv6  2600::2 |     is enslaved       | IPv6 2600::1   |
         |                |     to bridge toebr   |                |
         |                |     on machine TOE    |                |
         |   toebr (eth4) |>>                   <<| eth1           |
         | IPv4  10.0.1.2 |  \                 /  | IPv4 10.0.1.1  |
         | IPv6 2600:1::2 |   \               /   | IPv6 2600:1::1 |
         |                |    \             /    |                |
         +----------------+     +~~~~~~~~~~~+     +----------------+
                                | secondary |
                                |  network  |
                                +-----------+


Please see section "Procedures for configuration" about details how to set
up the network configuration.

Important note:
IPv6 addresses must have global scope for the tests to work.


Testing strategy
----------------

The strategy of the testing is to provide a known and preferable empty
chain in the tables prior to the start of the testing. Then a test message is
run through the appropriate chain of the tables showing that it is not
blocking or filtering on the test message. The rule is applied with the
appropriate filter information and the test message is run through again.
The result is checked for the expected result of either the dropping,
acceptance, or rejection of the test message. Often the dropping of a message
is verified through the timeout of a listen for the message or the timeout
of a connect request. It is usually verified again via the action parameter
for the message type NETFILTER in the audit log which is rotated before
the start of each test. In the case of a chain policy drop rule the listen
or connect timeout must suffice. This is because the only way to audit a
dropped message is to insert a rule with a target of AUDIT_DROP, however
by inserting such a rule it would not verify that the drop is caused by the
policy change as opposed to the rule inserted to audit the drop.


Environmental variables
-----------------------

There are a number of environmental variables required in order to provide
the information needed to set the rules in iptables, ip6tables and ebtables.
Some of these environmental variables are also required by the network
tests in the audit-test/network directory. These environmental variables
may be set manually prior to running the tests but the process of setting them
all is simplified by the config-server.bash script. This script will ask for
the pertinent ipv4, ipv6, and MAC addresses as well as device names to which
these addresses are assigned. This allows considerable flexibility in
configuring systems with 2 or possibly several more network interfaces on
both the TOE platform as well as the network server platform. The
config-server.bash script will build a profile.<hostname> file in the
utils/netfilter directory in the audit-test suite path. This file
should be sourced prior to running the tests. it is important to pay
attention to the format and correctness of the answers. While the
config-server.bash script will echo your response to the questions and allow
you the opportunity to change your responses, it currently does no format
checking and cannot verify if an address or device name is accurate. It does
however use a profile.sample file in the same directory to provide a default
answer which is primarily provided for the purpose of giving a sample of the
format expected in the response.

Below is a list of the environmental variables required to run all the tests
as well as an explanation of what they are.

RHOST="localhost"  (always the local loopback IPv4)

RHOST6="::1"       (always the local loopback IPv6)

MODE           (set to either 32 or 64 depending on whether the TOE OS is
                installed as 32 bit or 64 bit)

PPROFILE       (set to capp if running selinux targeted policy (a.k.a base)on
                the TOE or set to lspp if running mls policy on the TOE)

PATH="$PATH:." (The PATH should include the local directory)

PASSWD         (This should be set to the super user password)

AUDITPATH      (Should be set to the audit-test suite directory on the TOE
                the directory path should include audit-test. This would
                normally be set to /usr/local/eal4_testing/audit-test)

LOCAL_DEV      (primary Ethernet device of the TOE for example "eth0")

LOCAL_SEC_DEV  (secondary Ethernet device of the TOE for example "eth1")

LOCAL_SEC_MAC  (MAC address of the secondary Ethernet device on the TOE

LOCAL_IPV4     (IPv4 address of primary device on TOE)

LOCAL_IPV6     (IPv6 address of primary device on TOE)

LOCAL_SEC_IPV4 (IPv4 address of secondary device on TOE)

LOCAL_SEC_IPV6 (IPv6 address of secondary device on TOE)

LBLNET_SVR_IPV4 (This is the IPv4 address for the primary device on the
                 network server where the lblnet_tst_server application
                 is running)
LBLNET_SVR_IPV6 (This is the IPv6 address for the primary device on the
                 network server where the lblnet_tst_server application
                 is running)

LBLNET_SVR_DEV  (The device name for the network server's primary interface
                 for example "eth0")

LNET4MASK       (Network mask being used on the primary IPv4 network for
                 example 255.255.255.0)

LNET6MASK       (Network mask being used on the primary IPv6 network,
                 specified in number of bits for example "64")

SECNET_SVR_IPV4 (IPv4 address of the network server's secondary address)

SECNET_SVR_IPV6 (IPv6 address of the network server's secondary address)

SECNET_SVR_DEV  (Device name for the network server's secondary interface
                 for example "eth1")

SECNET_SVR_MAC  (MAC address of secondary device on the network server
                 where the remote lblnet_tst_server application is running)

SECNET_IPV4     (IPV4 address of the secondary device on the network server
                 where the remote lblnet_tst_server application is running)

SNET4MASK       (Network mask being used on the secondary IPv4 network for
                 example 255.255.255.0)

SNET6MASK       (Network mask being used on the secondary IPv6 network,
                 specified in number of bits for example "64")

BRIDGE_FILTER   (Name of the bridge created on TOE for the ebtables testing.
                 This bridge should have the secondary device enslaved to
                 it.


Example of all needed environment variables for TOE
---------------------------------------------------

Example of all environment variables for TOE according to the configuration
shown in the "Network configuration" section. Please note these are a superset
of all configuration environment variables you need to successfully run
the all tests in the suite. Also be aware you need to adjust correctly
according to your configuration:

export PASSWD="redhat"
export RHOST="localhost"
export RHOST6="::1"
export LBLNET_SVR_IPV4="10.0.0.1"
export LBLNET_SVR_IPV6="2600::1"
export LBLNET_PREFIX_IPV6="2600::/64"
export PATH="$PATH:."
export MODE=64
export PPROFILE=lspp
export AUDITPATH=/usr/local/eal4_testing/audit-test
export LOCAL_DEV="eth3"
export LOCAL_SEC_DEV="eth4"
export LOCAL_SEC_MAC="78:2B:CB:4B:EB:BC"
export LOCAL_IPV4="10.0.0.2"
export LOCAL_IPV6="2600::2"
export LOCAL_SEC_IPV4="10.0.1.2"
export LOCAL_SEC_IPV6="2600:1::2"
export LBLNET_SVR_DEV="eth0"
export LNET4MASK="255.255.255.0"
export LNET6MASK="64"
export SECNET_SVR_IPV4="10.0.1.1"
export SECNET_SVR_IPV6="2600:1::1"
export SECNET_SVR_DEV="eth1"
export SECNET_SVR_MAC="00:04:23:B3:B5:83"
export SNET4MASK="255.255.255.0"
export SNET6MASK="64"
export BRIDGE_FILTER="toebr"


Procedures for configuration
----------------------------

Setting up configuration on the machines is possible two ways. You can manually
configure the network interfaces via the ifcfg scripts and manually create
the list of exported environment variables or use the config-server.bash
script.

Manual configuration
====================

This section lists the required ifcfg network configuration files on RHEL based
systems that are needed to configure the network interfaces on TOE and NS
according to the picture shown in section "Network configuration".

Please note that in the example below all interfaces are configured via static
network address assignment. You may use also DHCP for configuring your devices.

For details on configuring the network interfaces in general refer to:
https://docs.redhat.com/docs/en-US/Red_Hat_Enterprise_Linux/6/html/Deployment_Guide/s1-networkscripts-interfaces.html

After configuring the interfaces you need to restart the networking for the
changes to take effect:

CAPP machine# service network restart
LSPP machine# run_init service network restart

=== TOE network interfaces configuration ===
# cat /etc/sysconfig/network-scripts/ifcfg-eth3
DEVICE="eth3"
HWADDR="01:12:44:FE:A7:18"
ONBOOT="yes"
BOOTPROTO="static"
IPADDR="10.0.0.2"
NETMASK="255.255.255.0"
IPV6INIT="yes"
IPV6ADDR=2600::2
TYPE="Ethernet"

# cat /etc/sysconfig/network-scripts/ifcfg-eth4
DEVICE="eth4"
HWADDR="D8:D3:85:81:BE:04"
ONBOOT="yes"
TYPE="Ethernet"
BRIDGE=toebr

# cat /etc/sysconfig/network-scripts/ifcfg-toebr
DEVICE="toebr"
TYPE=bridge
BOOTPROTO="static"
IPADDR="10.0.1.2"
NETMASK="255.255.255.0"
IPV6INIT="yes"
IPV6ADDR=2600:1::2

=== NS network interfaces configuration ===
# cat /etc/sysconfig/network-scripts/ifcfg-eth0
DEVICE="eth0"
HWADDR="0F:14:15:B8:A0:77"
ONBOOT="yes"
BOOTPROTO="static"
IPADDR="10.0.0.1"
NETMASK="255.255.255.0"
IPV6INIT="yes"
IPV6ADDR=2600::1
TYPE="Ethernet"

# cat /etc/sysconfig/network-scripts/ifcfg-eth1
DEVICE="eth1"
HWADDR="00:04:23:B3:B5:83"
ONBOOT="yes"
BOOTPROTO="static"
IPADDR="10.0.1.1"
NETMASK="255.255.255.0"
IPV6INIT="yes"
IPV6ADDR=2600:1::1
TYPE="Ethernet"


Using config-server.bash script
===============================

The config-server.bash script in the utils/netfilter directory of the audit-test
suite should be run on each platform prior to running any of the netfilter
tests. The config-server.bash script must be executed on the TOE first. You
will need to have the MAC, IPV4, and IPV6 addresses for the two interfaces on both
the TOE and network server (netserver) handy as well as the device names.

The config-server script will query the user for the addresses, device names,
and network masks needed to properly configure the network, set routes in
the routing table, and set up the chain rules in iptables, ip6tables, and
ebtables. If you choose not to run the config-server.bash script you must set
the above environmental variables and routing tables manually prior to running
the tests.

Prior to running the config-server.bash script you should create the logical
bridge on the TOE that will be used to test ebtables. The name of the logical
bridge will be requested by the config-server.bash script. The bridge can be
set up with the following commands:

brctl addbr <bridge name>              -- This creates an instance of the
                                          Ethernet bridge

After executing this command it is a good time to modify the
ifcfg-<ethernet interface> in the /etc/sysconfig/network-scripts directory
Below is a sample of what the content of this file (ifcfg-eth1) might look
like if the ethernet interface name was eth1 and the bridge name was br1

DEVICE="eth1"
BOOTPROTO="static"
HWADDR="00:21:5E:F0:31:9F"
ONBOOT="yes"
BRIDGE="br1"

brctl addif <bridge name> <ethernet interface> -- This assigns the ethernet
                                            interface as a port of the bridge

After executing this command it is a good time to create the
ifcfg-<bridge name> in the /etc/sysconfig/network-scripts directory
Below is a sample of what the content of this file (ifcfg-br1) might look
like if the ethernet interface name was eth1 and the bridge name was br1

DEVICE="br1"
BOOTPROTO="static"
IPADDR="192.168.1.67"
NETMASK="255.255.255.0"
IPV6INIT="yes"
ONBOOT="yes"
TYPE="Bridge"

Restart the network at this point with either a "service network restart" if
running in capp mode or "run_init service network restart" if running mls
policy.

brctl setageing <bridge name> 3600    --sets the ageing timer

Setting the ageing timer to a high value is helpful to the testing as
it prevents the learned mac addresses in the bridge's forwarding database
from being deleted when it hasn't seen a frame from that mac address in the
timer number of seconds.

The setup of this bridge will be placed within the config-server.bash script
at a later date.

After the config-server script has been run there will be a file named
profile.<hostname> int the utils/netfilter directory of the audit-test suite
path. This file will contain all the export commands for the environmental
variables listed above. It contains environmental variables that are needed on
each of the 2 platforms. The file profile.<hostname> file needs to be copied
to the utils/netfilter directory in the audit-test suite path of each of the
other platform as profile.<netserver hostname> in the case of the netserver
After the file has been copied a source of the profile.<hostname> should be
executed on the platform. The config-server script should be then be run on
the platform (netserver)
The config-server.bash script when run on the netserver platform will only
query for the role (netserver) and the superuser password. It will use the
information from the profile.<role hostname> to setup the network configuration
and routing.

Once the config-server.bash script has been run on each of the 2 platforms
(TOE first followed by the netserver) The netfilter tests will be ready
to run. Once the initial setup has been completed the config-server.bash does
not need to be run again unless an address or device name is changed for the
configuration. After initial setup the only thing that needs to be executed
when re-running the tests from a new login session is "source profile.<hostname>"
on the TOE and the netserver prior to running the the netfilter tests.
