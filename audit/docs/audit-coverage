./trustedprograms/tests/test_groupmod.c
1: When a group's gid is changed // groupmod -g gid
2: When a groups's password is changed // groupmod -p password
4: When a user is added to a group and when user is removed from a group
  // groupmod -A username
  // groupmod -R username
5: FAILURE When PAM authentication fails for the user.  // groupmod

./trustedprograms/tests/test_usermod.c
1: When a user name is changed in a group.  // usermod -l
2: When a user is removed from a group.  // usermod -G
  // The user must be a member of a group that is not in the list of groups (-G) supplied on the command to create this record.
3: When a user name is added to a group.  // usermod -l -G
  // The user must not already be a member of a group that is in the list of groups (-G) supplied on the command to create this record.
4: When a user's home directory is moved.  // usermod -d -m
  // This record can be generated in two different ways.  The first is if the old and new home directory are on the same filesystem.
  // The second is if the old and new home directory are on different filesystems.
5: When a user's home directory owner(s) is changed.  // usermod -d -m -u
6: When a user's uid is changed. & When a user's home directory tree owner(s) is changed.  // usermod -u
  // Although the default group gid will be changed along with the uid, this record will only be generated if the uid is changed.
7: When a user's password is changed.  // usermod -p
8: When a user's name is changed.  // usermod -l
9: When a user's default group is changed.  // usermod -g

./trustedprograms/tests/test_passwd.c
1: When a user successfully uses the passwd program.  // passwd 
2: FAILURE When a user unsuccessfully uses the passwd program.  // passwd
3: FAILURE When a non-root user tries to list all passwd status.  // passwd -S -a
4: When root lists all passwd status.  // passwd -S -a
5: FAILURE When non-root user tries to change shadow data // passwd -k root
6: FAILURE When non-root user tries to lock root's password // passwd -l root
7: When root locks a user's password // passwd -l USER
8: When user tries to display own password information // passwd -S

./trustedprograms/tests/test_useradd.c
1: When the defaults for useradd are changed.  // /usr/sbin/useradd --save-defaults -g GID -d HOMEDIR -e EXPIRE -f INACTIVE -s SHELL
2: When a user is added to a group.  // useradd -G GID USER
4: When a user is added.  // useradd 
5: When a user's home directory is created.  // useradd -m USER
6: FAILURE When PAM authentication fails for the user.  // useradd

./trustedprograms/tests/test_groupadd.c
1: When a group is added.  // groupadd
2: FAILURE When PAM authentication fails for the user.  // groupadd

./trustedprograms/tests/test_userdel.c
1: When a user is removed from a group.  // userdel
2: When a user is deleted.  // userdel
3: When a user deletion command is run.  // userdel
  // If a user deletion command is defined this record will be generated.
  // The user deletion command can be defined through the login defs file, /etc/login.defs (default).
4: When a user deletion command is run.  // userdel
  // If a user deletion command is defined this record will be generated.
  // The user deletion command can be defined through the login defs file, /etc/login.defs (default).
5: When a user's mail file is deleted.  // userdel -r
  // Various situations can cause this record to not be generated, such as the owner of the file being different than the user being deleted,
  // the file not existing or the unlink call failing.  The mail file name is created based on the login definitions file, /etc/login.defs,
  // or how the program was built, configure.
6: When a user's mail file is forcefully deleted.  // userdel -r -f
  // The mail file name is created based on the login definitions file, /etc/login.defs, or how the program was built, configure.
7: When a user's home directory is deleted.  // userdel -r
8: FAILURE When PAM authentication fails for the user.  // userdel

./trustedprograms/tests/test_gpasswd.c
1: FAILURE When attempting to modify a group when the user is not "root" or an administrator.  // gpasswd
2: When removing the password associated with a group.  // gpasswd -r
3: When the group password is changed.  // gpasswd

./trustedprograms/tests/test_groupdel.c
1: When a group is deleted.  // groupdel
2: FAILURE When PAM authentication fails for the user.  // groupdel



./pam_laus/tests/test_sshd.c  // sshd
1: sshd When a user successfully uses the sshd program.

./pam_laus/tests/test_login.c  // login
1: login When a user successfully uses the login program.

./pam_laus/tests/test_vsftpd.c  // vsftpd
1: ftp When a user successfully uses the vsftpd program.



./libpam/tests/test_su.c  // su
1: su When a user successfully uses the su program.
2: FAILURE su  // su (and a bad password)

./libpam/tests/test_sshd.c  // sshd
1: sshd When a user successfully uses the sshd program.
2: FAILURE sshd When a user unsuccessfully uses the sshd program.

./libpam/tests/test_login.c  // login
1: login When a user successfully uses the login program.
2: FAILURE login When a user fails to authenticate using the login program.

./libpam/tests/test_vsftpd.c  // ftp
1: ftp When a user successfully uses the vsftpd program.
2: FAILURE ftp When a user successfully uses the vsftpd program.



./audit_trail_protection/audit_trail_protection.c
1: stat() file, check root ownership, check permissions
	/etc/audit/audit.conf
	/etc/audit/filesets.conf
	/etc/audit/filter.conf
2: check audit log path is less than 255 chars long



audit_tools/ssh01
audit_tools/ssh01_s1
  helpers to generate ssh login

audit_tools/test_setxattr.c
  helper that creates a temp file, sets euid and fsuid then setxattr, sets fsuid and euid back and unlinks 

audit_tools/test_groupadd.c
  helper that does a group add

audit_tools/test_bind.c
  helper for bind and network utils
  The successful case creates an ordinary INET TCP socket and binds to it.
   1) Creates a new socket
   2) Finds a valid port for binding
   3) Sets the euid to the test user
   4) Makes the bind syscall
   5) Sets the euid to the superuser
   6) Verifies that bind executed successfully
   7) Closes the socket.

  In the erroneous case passes a -1 for socket file descriptor.
  Since this is a bad file descriptor, bind will return an EBADF error code.
   1) Creates a new socket
   2) Sets the euid to the test user
   3) Calls bind() with the sockfd being -1
   4) Sets the euid to the superuser
   5) Verifies that bind executed erroneously
   6) Closes the socket.

audit_tools/au_login
  use ssh helpers to generate login messages, then check for them with the following commands
# aucat | grep sshd
# augrep -e LOGIN
# augrep --event=LOGIN
# augrep -e LOGIN -A 127.0.0.1
# augrep -e LOGIN --address=127.0.0.1
# augrep -e LOGIN -E /usr/sbin/sshd
# augrep -e LOGIN --execute=/usr/sbin/sshd
# augrep -e LOGIN -H localhost
# augrep -e LOGIN --hostname=localhost
# augrep -e LOGIN -T NODEVssh
# augrep -e LOGIN --terminal=NODEVssh

audit_tools/au_netlink
 ip and tc commands to seed audit log 
# aucat | grep RTM_NEWADDR
# augrep -e NETLINK
# augrep --event=NETLINK
# augrep -e NETLINK -G 0
# augrep -e NETLINK --group=0
# augrep -e NETLINK -I 0
# augrep -e NETLINK --dstgroup=0
# augrep -e NETLINK -L 0
# augrep -e NETLINK --netresult=0
# aucat | grep RTM_DELADDR
# aucat | grep RTM_NEWNEIGH
# aucat | grep RTM_DELNEIGH
# aucat | grep RTM_NEWROUTE
# aucat | grep RTM_DELROUTE
# aucat | grep RTM_NEWRULE
# aucat | grep RTM_DELRULE
# aucat | grep RTM_NEWQDISC
# aucat | grep RTM_DELQDISC
# aucat | grep RTM_NEWTCLASS
# aucat | grep RTM_DELTCLASS
# aucat | grep RTM_NEWTFILTER
# aucat | grep RTM_DELTFILTER

audit_tools/au_restart
  uses `/etc/init.d/audit restart` to seed audit log, then checks for messages

audit_tools/au_syscalls
  test_setxattr and test_bind used to seed audit log
# aucat | grep bind
# augrep -e SYSCALL | grep bind
# augrep --event=SYSCALL | grep bind
# augrep -e SYSCALL -S bind
# augrep -e SYSCALL --syscall=bind
# augrep -e SYSCALL -M 102
# augrep -e SYSCALL --major=102
# augrep -e SYSCALL -N 2 | grep bind
# augrep -e SYSCALL --minor=2 | grep bind
# augrep -e SYSCALL -R 0 |  grep bind
# augrep -e SYSCALL --sysresult=0 |  grep bind
# augrep -e SYSCALL -D [sock:af=2,type=1]
# augrep -e SYSCALL --sysdata=[sock:af=2,type=1]

audit_tools/au_trustedpgms
  test_groupadd used to seed audit log
# aucat | grep groupadd
# augrep -e TEXT | grep groupadd
# augrep --event=TEXT | grep groupadd
# augrep -e TEXT -X groupadd
# augrep -e TEXT --textdata=groupadd


audbin/audbin.pl
  test directly calls audbin with a series of parameters and verifies that the results are as expected. 
# Verify that the %h flag gives the expected results  -- hostname variable
# Verify that a basic full copy can be made
# Verify that audbin will not overwrite when the backup file already exists and we give the append flag
# Verify that audbin will overwrite when the backup file already exists and we give the overwrite flag
# Verify that audbin will not overwrite when the backup file already
    exists and we give the %u flag  -- advance counter (save.{+1}) instead of overwrite
# Verify that save.1 is identical to auditlogbin.0
# Verify that the log file is cleared after saving its contents
# Verify that the %t flag gives expected results  -- time variable



fail-safe/tests/test_rollover.c
   1) Performs pre-processing, including establishing a signal
      handler, incrementing the semaphore and establishing the audit
      configuration (with small pre-allocated binary files in order
      to easily test the rollover function).
   2) Forks a process that writes repeated user-message audit records
      to cause the log files to rollover.
   3) Verifies the rollover function by waiting for a successful
      decrement of the semaphore, insuring the symlink points to the
      new log file and verifying the new log file contains a
      user-message audit record.
   4) Performs post-processing, including resetting the audit
      configuration and displaying all output messages from the
      notification program.

fail-safe/tests/test_rollover_failure.c
   1) Performs pre-processing, including establishing a signal
      handler, incrementing the semaphore, lowering the kernel audit
      buffer (max-messages) and establishing the audit configuration
      (with small pre-allocated binary files in order to easily test
      the rollover function and telling the notify program to return
      a non-zero return code).
   2) Forks a process that writes repeated user-message audit records
      to cause the log files to rollover.  But before it does this,
      it sleeps for a bit to give the other processes time to setup.
      If this process does not block because of unsuccessful rollover
      failure support then this process will signal the parent with
      a SIGHUP.
   3) Forks a second process that detaches from auditing so as not
      to be blocked because of the rollover failure support.  But
      before it does this, it sleeps for a bit to give the parent
      process time to setup.  After detaching from auditing this
      process will sleep for a while to allow the first process
      to do it's thing.  If the first process gets blocked because
      of successful rollover failure support then this process will
      eventually wake up and signal the parent with a SIGINT.
   4) Detaches from auditing so as not to be blocked because of the
      rollover failure support.  Verifies the rollover failure support
      by waiting for a successful decrement of the semaphore (which
      will never happen - but since a semop call will return if the
      process is signaled it allows the test to easily process the
      signal which will indicate success or failure).
         SIGQUIT - an error during test setup
         SIGHUP  - rollover failure support failed
         SIGINT  - rollover failure support succeeded
   5) Performs post-processing, including resetting the kernel audit
      buffer (max-messages), killing the audit daemon using 'kill -9'
      because stopAudit() (which uses killall) won't work if rollover
      failure support worked, resetting the audit configuration and
      displaying all output messages from the notification program(s).



filter-conf/tests/test_socket_attrs.c
 Tests the sock-family, sock-type socket attribute filtering support.

filter-conf/tests/test_int_cmp.c
 Tests the integer comparison support in the audit filter

filter-conf/tests/test_login.c
 Tests the login support.

filter-conf/tests/test_syscall_attrs.c
 Tests the argN system call support.
 Tests the syscall-minor system call support. (on certain arches only)

filter-conf/tests/test_netlink_attrs.c
 Tests the netlink-family, netlink-type, netlink-flags socket attribute support.
 runs a route add then a route delete

filter-conf/tests/test_str_cmp.c
 Tests the string comparison filtering support.

filter-conf/tests/test_process_attrs.c
 Tests the login-uid process attribute support.

filter-conf/tests/test_file_attrs.c
 Tests the file-mode, file-dev, file-ino file attribute support.
 Tests the file-uid and file-gid file attribute support.
 Tests the dev-major, dev-minor file attribute support.

filter-conf/tests/test_user_msg.c
 Tests the user message filtering support.



Audit records:

raw from tail -f /var/log/audit/audit.log :
type=LOGIN msg=audit(1132069757.773:1153): login pid=27016 uid=0 old auid=4294967295 new auid=500

ausearch:
[mra@orbital ~]$ sudo /sbin/ausearch -p 27016
----
time->Tue Nov 15 10:49:17 2005
type=LOGIN msg=audit(1132069757.773:1153): login pid=27016 uid=0 old auid=4294967295 new auid=500

