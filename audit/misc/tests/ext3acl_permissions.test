This script tests if file permissions are properly checked with and
without ACLs. The script must be run as root to allow switching users.

Cry immediately if we are not running as root.

	$ id -u
	> 0

First, set up some test users.

        $ useradd -c "Test User" -g bin tstbin
        $ useradd -c "Test User" -g bin -G daemon tstdaemon

Set up a temporary directory and create a regular file with
defined permissions.

	$ mkdir d
	$ chmod 777 d
	$ cd d
	$ umask 027
	$ touch f
	$ ls -l f | awk -- '{ print $1, $3, $4 }'
	> -rw-r-----. root root


Make sure root has access to the file.  Verify that user tstdaemon does not
have access to the file owned by root.

	$ echo root > f

	$ su tstdaemon
	$ echo tstdaemon >> f
	> /bin/sh: f: Permission denied

	$ su


Now, change the ownership of the file to tstbin:bin and verify that this
gives user tstbin write access.

	$ chown tstbin:bin f
	$ ls -l f | awk -- '{ print $1, $3, $4 }'
	> -rw-r-----. tstbin bin
	$ su tstbin
	$ echo tstbin >> f


User tstdaemon is a member in the owning group, which has only read access.
Verify this.

	$ su tstdaemon
	$ cat f
	> root
	> tstbin

	$ echo tstdaemon >> f
	> /bin/sh: f: Permission denied


Now, add an ACL entry for user tstdaemon that grants him rw- access. File
owners and users capable of CAP_FOWNER are allowed to change ACLs.

	$ su tstbin
	$ setfacl -m u:tstdaemon:rw f
	$ getfacl --omit-header f
	> user::rw-
	> user:tstdaemon:rw-
	> group::r--
	> mask::rw-
	> other::---
	>


Verify that the additional ACL entry grants user tstdaemon write access.

	$ su tstdaemon
	$ echo tstdaemon >> f
	$ cat f
	> root
	> tstbin
	> tstdaemon


Remove write access from the group class permission bits, and
verify that this masks tstdaemon's write permission.

	$ su tstbin
	$ chmod g-w f
	$ getfacl --omit-header f
	> user::rw-
	> user:tstdaemon:rw-	#effective:r--
	> group::r--
	> mask::r--
	> other::---
	>

	$ su tstdaemon
	$ echo tstdaemon >> f
	> /bin/sh: f: Permission denied


Add an entry for group daemon with rw- access, and change the
permissions for user tstdaemon to r--. Also change the others permissions t
rw-. The user entry should take precedence, so tstdaemon should be denied
access.

	$ su tstbin
	$ setfacl -m u:tstdaemon:r,g:daemon:rw-,o::rw- f

	$ su tstdaemon
	$ echo tstdaemon >> f
	> /bin/sh: f: Permission denied


Remove the entry for user tstdaemon. The group daemon permissions should
now give user tstdaemon rw- access.

	$ su tstbin
	$ setfacl -x u:tstdaemon f

	$ su tstdaemon
	$ echo tstdaemon2 >> f
	$ cat f
	> root
	> tstbin
	> tstdaemon
	> tstdaemon2


Set the group daemon permissions to r-- and verify that after than, user
tstdaemon does not have write access anymore.

	$ su tstbin
	$ setfacl -m g:daemon:r f

	$ su tstdaemon
	$ echo tstdaemon3 >> f
	> /bin/sh: f: Permission denied


Now, remove the group daemon entry. Because user tstdaemon is a member in
the owning group, he should still have no write access.

	$ su tstbin
	$ setfacl -x g:daemon f

	$ su tstdaemon
	$ echo tstdaemon4 >> f
	> /bin/sh: f: Permission denied


Change the owning group. The other permissions should now grant user
tstdaemon write access.

	$ su
	$ chgrp root f

	$ su tstdaemon
	$ echo tstdaemon5 >> f
	$ cat f
	> root
	> tstbin
	> tstdaemon
	> tstdaemon2
	> tstdaemon5


Verify that permissions in separate matching ACL entries do not
accumulate.

	$ su
	$ setfacl -m g:bin:r,g:daemon:w f

	$ su tstdaemon
	$ : < f	 # open for reading
	$ : > f  # open for writing
	$ : <> f  # open for read-write
	> /bin/sh: f: Permission denied


Test if directories can have ACLs.  We assume that only one access check
algorithm is used for all file types the file system, so these tests
only need to verify that ACL permissions make a difference.

	$ su
	$ mkdir -m 750 e
	$ touch e/h

	$ su tstbin
	$ shopt -s nullglob ; echo e/*
	>

	$ echo i > e/i
	> /bin/sh: e/i: Permission denied

	$ su
	$ setfacl -m u:tstbin:rx e

	$ su tstbin
	$ echo e/*
	> e/h
	$ echo i > e/i
	> /bin/sh: e/i: Permission denied

	$ su
	$ setfacl -m u:tstbin:rwx e

	$ su tstbin
	$ echo i > e/i


Test if symlinks are properly followed.

	$ su
	$ touch g
	$ ln -s g l
	$ setfacl -m u:tstbin:rw l
	$ ls -l g | awk -- '{ print $1, $3, $4 }'
	> -rw-rw----+ root root


Test if ACLs are effective for block and character special files, fifos,
sockets. This is done by creating special files locally. The devices do
not need to exist: The access check is earlier in the code path than the
test if the device exists.


	$ mknod -m 0660 hdt b 91 64	# /dev/hdt
	$ mknod -m 0660 null c 1 3	# /dev/null
	$ mkfifo -m 0660 fifo

	$ su tstbin
	$ : < hdt
	> /bin/sh: hdt: Permission denied
	$ : < null
	> /bin/sh: null: Permission denied
	$ : < fifo
	> /bin/sh: fifo: Permission denied

	$ su
	$ setfacl -m u:tstbin:rw hdt null fifo

	$ su tstbin
	$ : < hdt
	> /bin/sh: hdt: No such device or address
	$ : < null
	$ ( echo blah > fifo & ) ; cat fifo
	> blah


Test if CAP_FOWNER is properly honored for directories. This addresses a
specific bug in XFS 1.2, which does not grant root access to files in
directories if the file has an ACL and only CAP_FOWNER would grant them.

	$ su
	$ mkdir -m 600 x
	$ chown tstdaemon:daemon x
	$ echo j > x/j
	$ ls -l x/j | awk -- '{ print $1, $3, $4 }'
	> -rw-r-----. root root

	$ setfacl -m u:tstdaemon:r x

	$ ls -l x/j | awk -- '{ print $1, $3, $4 }'
	> -rw-r-----. root root
	(With the bug this gives: `ls: x/j: Permission denied'.)

	$ echo k > x/k
	(With the bug this gives: `x/k: Permission denied'.)

	$ chmod 750 x


Clean up.

	$ su
	$ cd ..
	$ rm -rf d
        $ userdel -r tstbin
        $ userdel -r tstdaemon
