#!/bin/bash
# =============================================================================
# (c) Copyright Hewlett-Packard Development Company, L.P., 2007
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of version 2 the GNU General Public License as
#   published by the Free Software Foundation.
#   
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#   
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
# =============================================================================

## Unless specified, the expected error for test failures is EPERM.

##
## FS syscalls
##

## SYSCALL:	chmod()
## PURPOSE:
## Verify audit of attempts to change permissions of a file.  The test cases
## below try to change the permissions of a file which may or may not be
## owned by the user running the test process.  The test procedure is as
## follows:
## 1.  Create a new file.
## 2a. If expres=success, execute the test process as the file owner and
##     attempt to change the file permissions according to the value specified
##     by the 'flag' variable, verify the result
## 2b. If expres=fail, execute the test process as another user and
##     attempt to change the file permissions according to the value specified
##     by the 'flag' variable, verify the result
## 3.  Check the audit log for the correct syscall result
+ chmod perm=file_priv flag=777 expres=success user=super
+ chmod perm=file_priv flag=777 expres=fail user=test 

## SYSCALL:	chown()
## PURPOSE:
## Verify audit of attempts to change the ownership of a file.  The test cases
## below try to change the ownership for a file which may or may not be
## owned by the user running the test process.  The test procedure is as
## follows:
## 1.  Create a new file.
## 2a. If expres=success, execute the test process as the file owner and
##     attempt to change the file ownership to the user specified
##     by the 'flag' variable, verify the result
## 2b. If expres=fail, execute the test process as another user and
##     attempt to change the file ownership to the user specified
##     by the 'flag' variable, verify the result
## 3.  Check the audit log for the correct syscall result
+ chown perm=file_priv flag=root expres=success user=super
+ chown perm=file_priv flag=root expres=fail user=test 
if [[ $MODE == 32 ]]; then
+ chown32 perm=file_priv flag=root expres=success user=super
+ chown32 perm=file_priv flag=root expres=fail user=test 
fi

## SYSCALL:	fchmod()
## PURPOSE:
## Verify audit of attempts to change permissions of a file.  The test cases
## below try to change the permissions of a file which may or may not be
## owned by the user running the test process.  The test procedure is as
## follows:
## 1.  Create a new file.
## 2a. If expres=success, execute the test process as the file owner and
##     attempt to change the file permissions according to the value specified
##     by the 'flag' variable, verify the result
## 2b. If expres=fail, execute the test process as another user and
##     attempt to change the file permissions according to the value specified
##     by the 'flag' variable, verify the result
## 3.  Check the audit log for the correct syscall result
+ fchmod perm=file_priv flag=777 expres=success user=super
+ fchmod perm=file_priv flag=777 expres=fail user=test 

## SYSCALL:	fchmodat()
## PURPOSE:
## Verify audit of attempts to change permissions of a file relative to a
## directory file descriptor. See above for more details.
+ fchmodat perm=file_priv at=1 flag=777 expres=success user=super
+ fchmodat perm=file_priv at=1 flag=777 expres=fail user=test 

## SYSCALL:	fchown()
## PURPOSE:
## Verify audit of attempts to change the ownership of a file.  The test cases
## below try to change the ownership for a file which may or may not be
## owned by the user running the test process.  The test procedure is as
## follows:
## 1.  Create a new file.
## 2a. If expres=success, execute the test process as the file owner and
##     attempt to change the file ownership to the user specified
##     by the 'flag' variable, verify the result
## 2b. If expres=fail, execute the test process as another user and
##     attempt to change the file ownership to the user specified
##     by the 'flag' variable, verify the result
## 3.  Check the audit log for the correct syscall result
+ fchown perm=file_priv flag=root expres=success user=super
+ fchown perm=file_priv flag=root expres=fail user=test 
if [[ $MODE == 32 ]]; then
+ fchown32 perm=file_priv flag=root expres=success user=super
+ fchown32 perm=file_priv flag=root expres=fail user=test 
fi

## SYSCALL:	fchownat()
## PURPOSE:
## Verify audit of attempts to change the ownership of a file relative to a
## directory file descriptor. See above for more details.
+ fchownat perm=file_priv at=1 flag=root expres=success user=super
+ fchownat perm=file_priv at=1 flag=root expres=fail user=test 

## SYSCALL:	lchown()
## PURPOSE:
## Verify audit of attempts to change the ownership of a file.  The test cases
## below try to change the ownership for a file which may or may not be
## owned by the user running the test process.  The test procedure is as
## follows:
## 1.  Create a new file.
## 2a. If expres=success, execute the test process as the file owner and
##     attempt to change the file ownership to the user specified
##     by the 'flag' variable, verify the result
## 2b. If expres=fail, execute the test process as another user and
##     attempt to change the file ownership to the user specified
##     by the 'flag' variable, verify the result
## 3.  Check the audit log for the correct syscall result
+ lchown perm=file_priv flag=root expres=success user=super
+ lchown perm=file_priv flag=root expres=fail user=test 
if [[ $MODE == 32 ]]; then
+ lchown32 perm=file_priv flag=root expres=success user=super
+ lchown32 perm=file_priv flag=root expres=fail user=test 
fi

## SYSCALL:	umask()
## PURPOSE:
## Verify audit of attempts to set the file mode creation mask for a process.
## The testcase below sets the file mode creation mask for the test process.
## The umask() syscall is always sucessful.  The test procedure is as follows:
##  1. Execute the test process and set the file mode creation mask,
##     verify the result.
##  2. Check the audit log for the correct syscall result
+ umask perm=umask_set expres=success user=super

## SYSCALL:     mount()
## PURPOSE:
## Verify audit of attempts to mount a filesystem.  The test cases below try to
## mount a filesystem at a mount point which may or may not be accessible to
## the test process executing the mount() syscall.  The test procedure is as
## follows:
## 1.  Create a new directory which will be the mount point.
## 2a. If expres=success, execute the test process as the directory owner and
##     attempt to mount the filesystem, verify the result
## 2b. If expres=fail, execute the test process as another user and
##     attempt to mount the filesystem, verify the result
## 3.  Check the audit log for the correct syscall result
+ mount perm=dir_mount expres=success user=super
+ mount perm=dir_mount expres=fail user=test 

## SYSCALL:	swapon()
## PURPOSE:
## Verify audit of attempts to set the swap area. The testcases below try to set
## the swap area as a privileged or unprivileged user.  The test procedure is
## as follows:
## 1.  Create a new file to be used as a swap area.
## 2a. If expres=success, execute the test process as the superuser and
##     attempt to enable the swap file, verify the result
## 2b. If expres=fail, execute the test process as a regular user and
##     attempt to enable the swap file, verify the result
## 3.  Check the audit log for the correct syscall result
+ swapon perm=file_swap expres=success user=super
+ swapon perm=file_swap expres=fail user=test 

## SYSCALL:	init_module()
## PURPOSE:
## Verify audit of attempts to initialize a loadable module entry.  The
## testcases below try to initialize a loadable module entry as a privileged or
## unprivileged user.  The test procedure is as follows:
## 1a. If expres=success, execute the test process as the superuser and
##     attempt to initialize a loadable module entry; verify the result
## 1b. If expres=fail, execute the test process as a regular user and
##     attempt to initialize a loadable module entry; verify the result
## 2.  Check the audit log for the correct syscall result
+ init_module perm=module_load expres=success user=super
+ init_module perm=module_load expres=fail user=test

## SYSCALL:	delete_module()
## PURPOSE:
## Verify audit of attempts to delete a loadable module.  The testcases below
## try to delete a loadable module as a privileged or unprivileged user.
## The test procedure is as follows:
## 1a. If expres=success, execute the test process as the superuser and
##     attempt to delete a loadable module; verify the result
## 1b. If expres=fail, execute the test process as a regular user and
##     attempt to delete a loadable module; verify the result
## 2.  Check the audit log for the correct syscall result
+ delete_module perm=module_unload expres=success user=super
+ delete_module perm=module_unload expres=fail user=test

##
## IPC syscalls
##

## Note: When testing the ipc() syscall, the 'op' variable determines the tested
## syscall operation.

## SYSCALL:     msgctl(), ipc()
## PURPOSE:
## Verify audit of attempts to perform message control operations.  There are
## two types of testcases in this set of tests. The first, using the
## 'perm=msg_id_remove' variable, tries to remove a message queue that may or
## may not be owned by the test process.  The second, using the
## 'perm=msg_id_set' variable, tries to set the msg_perm.uid for a message queue
## that may or may not be owned by the test process.  The test procedure is as
## follows:
## 1.  Create a message queue.
## 2a. If expres=success, execute the test process as the message queue
##     owner and attempt the syscall using the value of flag to determine
##     the control operation; verify the result.
## 2b. If expres=fail, execute the test process as another user and attempt the
##     syscall using the value of flag to determine the control operation;
##     verify the result.
## 3.  Check the audit log for the correct syscall result
if [[ $MODE == 64 ]]; then
+ msgctl perm=msg_id_remove expres=success user=super
+ msgctl perm=msg_id_remove expres=fail user=test 
+ msgctl perm=msg_id_set expres=success user=super
+ msgctl perm=msg_id_set expres=fail user=test 
fi
if [[ $MODE == 32 ]]; then
+ ipc op=msgctl perm=msg_id_remove expres=success user=super
+ ipc op=msgctl perm=msg_id_remove expres=fail user=test 
+ ipc op=msgctl perm=msg_id_set expres=success user=super
+ ipc op=msgctl perm=msg_id_set expres=fail user=test 
fi

## SYSCALL:     semctl(), ipc()
## PURPOSE:
## Verify audit of attempts to perform semaphore control operations.  There are
## two types of testcases in this set of tests. The first, using the
## 'perm=sem_id_remove' variable, tries to remove a semaphore set that may or
## may not be owned by the test process.  The second, using the
## 'perm=sem_id_set' variable, tries to set the sem_perm.uid for a semaphore set
## that may or may not be owned by the test process.  The test procedure is as
## follows:
## 1.  Create a semaphore set.
## 2a. If expres=success, execute the test process as the semaphore set
##     owner and attempt the syscall using the value of flag to determine
##     the control operation; verify the result.
## 2b. If expres=fail, execute the test process as another user and attempt the
##     syscall using the value of flag to determine the control operation;
##     verify the result.
## 3.  Check the audit log for the correct syscall result
if [[ $MODE == 64 ]]; then
+ semctl perm=sem_id_remove expres=success user=super
+ semctl perm=sem_id_remove expres=fail user=test 
+ semctl perm=sem_id_set expres=success user=super
+ semctl perm=sem_id_set expres=fail user=test 
fi
if [[ $MODE == 32 ]]; then
+ ipc op=semctl perm=sem_id_remove expres=success user=super
+ ipc op=semctl perm=sem_id_remove expres=fail user=test 
+ ipc op=semctl perm=sem_id_set expres=success user=super
+ ipc op=semctl perm=sem_id_set expres=fail user=test 
fi

## SYSCALL:     shmctl(), ipc()
## PURPOSE:
## Verify audit of attempts to perform shared memory control operations.  There
## are two types of testcases in this set of tests. The first, using the
## 'perm=shm_id_remove' variable, tries to remove a shared memory segment that
## may or may not be owned by the test process.  The second, using the
## 'perm=shm_id_set' variable, tries to set the shm_perm.uid for a shared memory
## segment that may or may not be owned by the test process.  The test procedure
## is as follows:
## 1.  Create a shared memory segment.
## 2a. If expres=success, execute the test process as the shared memory segment
##     owner and attempt the syscall using the value of flag to determine
##     the control operation; verify the result.
## 2b. If expres=fail, execute the test process as another user and attempt the
##     syscall using the value of flag to determine the control operation;
##     verify the result.
## 3.  Check the audit log for the correct syscall result
if [[ $MODE == 64 ]]; then
+ shmctl perm=shm_id_remove expres=success user=super
+ shmctl perm=shm_id_remove expres=fail user=test 
+ shmctl perm=shm_id_set expres=success user=super
+ shmctl perm=shm_id_set expres=fail user=test 
fi
if [[ $MODE == 32 ]]; then
+ ipc op=shmctl perm=shm_id_remove expres=success user=super
+ ipc op=shmctl perm=shm_id_remove expres=fail user=test 
+ ipc op=shmctl perm=shm_id_set expres=success user=super
+ ipc op=shmctl perm=shm_id_set expres=fail user=test 
fi

##
## NETWORK and I/O syscalls
##

## SYSCALL:	bind(), socketcall()
## PURPOSE:
## Verify audit of attempts to bind a port to a socket.  The testcases below try
## bind a privileged port to a socket as the superuser and as a regular user.
## The test procedure is as follows:
## 1a. If expres=success, execute the test process as the superuser and
##     attempt to bind a privileged port, verify the result.
## 1b. If expres=fail, execute the test process as a regular user and
##     attempt to bind a privileged port, verify the result.
##  2. Check the audit log for the correct syscall result
if [[ $MODE == 64 ]]; then
+ bind perm=port_priv expres=success user=super
+ bind perm=port_priv expres=fail user=test err=EACCES
fi
if [[ $MODE == 32 ]]; then
+ socketcall perm=port_priv op=bind expres=success user=super
+ socketcall perm=port_priv op=bind expres=fail user=test err=EACCES
fi

## SYSCALL:	ioctl()
## PURPOSE:
## Verify audit of attempts to permform ioctl operations.  The testcases below
## try to get a file's disk block map as the superuser and as a regular user.
## The test procedure is as follows:
## 1.  Create a new file.
## 2a. If expres=success, execute the test process as the superuser and
##     attempt to get the file's disk block map; verify the result.
## 2b. If expres=fail, execute the test process as a regular user and
##     attempt to get the file's disk block map; verify the result.
## 3.  Check the audit log for the correct syscall result
+ ioctl perm=fio_fibmap expres=success user=super
+ ioctl perm=fio_fibmap expres=fail user=test 

## SYSCALL:	ioperm()
## PURPOSE:
## Verify audit of attempts to set the port access permission bits for a
## process.  The testcases below try to set port permission bits as the
## superuser and as a regular user.  The test procedure is as follows:
## 1a. If expres=success, execute the test process as the superuser and
##     attempt to set port permission bits, verify the result.
## 1b. If expres=fail, execute the test process as a regular user and
##     attempt to set port permission bits, verify the result.
##  2. Check the audit log for the correct syscall result
if [[ $MODE == 32 ]]; then
+ ioperm perm=io_perm expres=success user=super
+ ioperm perm=io_perm expres=fail user=test 
fi

## SYSCALL:	iopl()
## PURPOSE:
## Verify audit of attempts to set the I/O privilege level for a process.
## The testcases below try to set the I/O privilege level as the
## superuser and as a regular user.  The test procedure is as follows:
## 1a. If expres=success, execute the test process as the superuser and
##     attempt to set process's the I/O privilege level, verify the result.
## 1b. If expres=fail, execute the test process as a regular user and
##     attempt to set process's the I/O privilege level, verify the result.
##  2. Check the audit log for the correct syscall result
if [[ $MODE == 32 ]]; then
+ iopl perm=io_priv expres=success user=super
+ iopl perm=io_priv expres=fail user=test 
fi

##
## PROCESS CONTROL syscalls
##

## SYSCALL:	clone(), clone2()
## PURPOSE:
## Verify audit of attempts to create a child process.  The testcases below try
## to create a child process in a new namespace as the superuser and as a
## regular user.  The test procedure is as follows:
## 1a. If expres=success, execute the test process as the superuser and
##     attempt to create a child process with CLONE_NEWNS, verify the result.
## 1b. If expres=fail, execute the test process as a regular user and
##     attempt to create a child process with CLONE_NEWNS, verify the result.
## 2.  Check the audit log for the correct syscall result
+ clone perm=process_newns expres=success user=super
+ clone perm=process_newns expres=fail user=test 
if [[ $HOSTTYPE == ia64 ]]; then
+ clone2 perm=process_newns expres=success user=super
+ clone2 perm=process_newns expres=fail user=test 
fi

## SYSCALL:	fork(), vfork()
## PURPOSE:
## Verify audit of attempts to create a child process.  The testcases below try
## to create a child process beyond the caller's RLIMIT_NPROC resource limit
## as the superuser and as a regular user.  The test procedure is as follows:
## 1a. If expres=success, set RLIMIT_NPROC, execute the test process as the
##     superuser and attempt to fork a child process, verify the result.
## 1b. If expres=fail, set RLIMIT_NPROC, execute the test process as a
##     regular user and attempt to fork a child process, verify the result.
## 2.  Check the audit log for the correct syscall result
if [[ $HOSTTYPE != ia64 ]]; then
+ fork perm=process_nproc expres=success user=super \
  testfunc=test_su_fork
+ fork perm=process_nproc expres=fail user=test err=EAGAIN \
  testfunc=test_su_fork
fi
if [[ $HOSTTYPE != ia64 ]]; then
+ vfork perm=process_nproc expres=success user=super \
  testfunc=test_su_fork
+ vfork perm=process_nproc expres=fail user=test err=EAGAIN \
  testfunc=test_su_fork
fi

## SYSCALL:	ptrace()
## PURPOSE:
## Verify audit of attempts to trace a process.  The testcases below try to
## commence tracing a process as the superuser and as a regular user.  The test
## procedure is as follows:
## 1.  Start a new dummy process as the superuser.
## 2a. If expres=success, execute the test process as the superuser and
##     attempt to attach to the dummy process for tracing, verify the result.
## 2b. If expres=fail, execute the test process as a regular user and
##     attempt to attach to the dummy process for tracing, verify the result.
## 3.  Check the audit log for the correct syscall result
+ ptrace perm=process_attach expres=success user=super
+ ptrace perm=process_attach expres=fail user=test 

##
## PROCESS CREDENTIALS syscalls
##

## SYSCALL:	capset()
## PURPOSE:
## Verify audit of attempts to set capabilities for a process.  The testcases
## below try to set capabilities as the superuser and as a regular user.
## The test procedure is as follows:
## 1a. If expres=success, execute the test process as the superuser and
##     attempt to set CAP_AUDIT_CONTROL, verify the result.
## 1b. If expres=fail, execute the test process as a regular user and
##     attempt to set CAP_AUDIT_CONTROL, verify the result.
##  2. Check the audit log for the correct syscall result
+ capset perm=cap_set flag=cap_audit_control expres=success user=super
+ capset perm=cap_set flag=cap_audit_control expres=fail user=test 

## SYSCALL:	setgroups()
## PURPOSE:
## Verify audit of attempts to set the list of supplementary group IDs for a
## process.  The testcases below try to set supplementary group IDs as the
## superuser and as a regular user.  The test procedure is as follows:
## 1a. If expres=success, execute the test process as the superuser and
##     attempt to add a supplementary group '3', verify the result.
## 1b. If expres=fail, execute the test process as a regular user and
##     attempt to add a supplementary group '3', verify the result.
##  2. Check the audit log for the correct syscall result
+ setgroups perm=group_set flag=3 expres=success user=super
+ setgroups perm=group_set flag=3 expres=fail user=test 
if [[ $MODE == 32 ]]; then
+ setgroups32 perm=group_set flag=3 expres=success user=super
+ setgroups32 perm=group_set flag=3 expres=fail user=test 
fi

## SYSCALL:	setfsgid()
## PURPOSE:
## Verify audit of attempts to set group identity used for file system checks
## for a process.  The testcases below try to the fs group identity as the
## superuser and as a regular user.  The setfsgid() "fails" by not setting the
## fsgid, but it doesn't return any error codes.  To handle this, the test
## expects a 'success' return value in all cases.  The test can determine
## whether the change was effective by looking at the audit record.  When the
## fsgid is set, the new value is reflected in the audit record.  The test
## procedure is as follows:
## 1a. If user=super, execute the test process as the superuser and
##     attempt to set the fs group id to 3, verify the result.
## 1b. If user=test, execute the test process as a regular user and
##     attempt to set the fs group id to 3, verify the result.
##  2. Check the audit log for the correct syscall result
+ setfsgid perm=fsgid_set flag=3 expres=success user=super \
  testfunc=test_su_fsgid_set
+ setfsgid perm=fsgid_set flag=3 expres=success user=test \
  tag=setfsgid__cap_fsgid_set_fail_test
if [[ $MODE == 32 ]]; then
+ setfsgid32 perm=fsgid_set flag=3 expres=success user=super \
  testfunc=test_su_fsgid_set
+ setfsgid32 perm=fsgid_set flag=3 expres=success user=test \
  tag=setfsgid32__cap_fsgid_set_fail_test
fi

## SYSCALL:	setfsuid()
## PURPOSE:
## Verify audit of attempts to set user identity used for file system checks
## for a process.  The testcases below try to the fs user identity as the
## superuser and as a regular user.  The setfsuid() "fails" by not setting the
## fsuid, but it doesn't return any error codes.  To handle this, the test
## expects a 'success' return value in all cases.  The test can determine
## whether the change was effective by looking at the audit record.  When the
## fsuid is set, the new value is reflected in the audit record.  The test
## procedure is as follows:
## 1a. If user=super, execute the test process as the superuser and
##     attempt to set the fs user id to 3, verify the result.
## 1b. If user=test, execute the test process as a regular user and
##     attempt to set the fs user id to 3, verify the result.
##  2. Check the audit log for the correct syscall result
+ setfsuid perm=fsuid_set flag=3 expres=success user=super \
  testfunc=test_su_fsuid_set
+ setfsuid perm=fsuid_set flag=3 expres=success user=test \
  tag=setfsuid__cap_fsuid_set_fail_test
if [[ $MODE == 32 ]]; then
+ setfsuid32 perm=fsuid_set flag=3 expres=success user=super \
  testfunc=test_su_fsuid_set
+ setfsuid32 perm=fsuid_set flag=3 expres=success user=test \
  tag=setfsuid32__cap_fsuid_set_fail_test
fi

## SYSCALL:	setgid()
## PURPOSE:
## Verify audit of attempts to set the effective group identity for a
## process.  The testcases below try to set the effective group id as the
## superuser and as a regular user.  The test procedure is as follows:
## 1a. If expres=success, execute the test process as the superuser and
##     attempt to set the effective group id to 0, verify the result.
## 1b. If expres=fail, execute the test process as a regular user and
##     attempt to set the effective group id to 0, verify the result.
##  2. Check the audit log for the correct syscall result
+ setgid perm=gid_set flag=0 expres=success user=super
+ setgid perm=gid_set flag=0 expres=fail user=test 
if [[ $MODE == 32 ]]; then
+ setgid32 perm=gid_set flag=0 expres=success user=super
+ setgid32 perm=gid_set flag=0 expres=fail user=test 
fi

## SYSCALL:	setregid()
## PURPOSE:
## Verify audit of attempts to set the real and effective group identity
## for a process.  The testcases below try to set the real and effective
## group id as the superuser and as a regular user.  The test procedure is
## as follows:
## 1a. If expres=success, execute the test process as the superuser and
##     attempt to set the real/effective group id to 0, verify the result.
## 1b. If expres=fail, execute the test process as a regular user and
##     attempt to set the real/effective group id to 0, verify the result.
##  2. Check the audit log for the correct syscall result
+ setregid perm=gid_set flag=0 expres=success user=super
+ setregid perm=gid_set flag=0 expres=fail user=test 
if [[ $MODE == 32 ]]; then
+ setregid32 perm=gid_set flag=0 expres=success user=super
+ setregid32 perm=gid_set flag=0 expres=fail user=test 
fi

## SYSCALL:	setresgid()
## PURPOSE:
## Verify audit of attempts to set the real, effective and saved group identity
## for a process.  The testcases below try to set the real, effective and saved
## group id as the superuser and as a regular user.  The test procedure is
## as follows:
## 1a. If expres=success, execute the test process as the superuser and
##     attempt to set the real/effective/saved group id to 0, verify the result.
## 1b. If expres=fail, execute the test process as a regular user and
##     attempt to set the real/effective/saved group id to 0, verify the result.
##  2. Check the audit log for the correct syscall result
+ setresgid perm=gid_set flag=0 expres=success user=super
+ setresgid perm=gid_set flag=0 expres=fail user=test 
if [[ $MODE == 32 ]]; then
+ setresgid32 perm=gid_set flag=0 expres=success user=super
+ setresgid32 perm=gid_set flag=0 expres=fail user=test 
fi

## SYSCALL:	setuid()
## PURPOSE:
## Verify audit of attempts to set the effective user identity for a
## process.  The testcases below try to set the effective user id as the
## superuser and as a regular user.  The test procedure is as follows:
## 1a. If expres=success, execute the test process as the superuser and
##     attempt to set the effective user id to 0, verify the result.
## 1b. If expres=fail, execute the test process as a regular user and
##     attempt to set the effective user id to 0, verify the result.
##  2. Check the audit log for the correct syscall result
+ setuid perm=uid_set flag=0 expres=success user=super
+ setuid perm=uid_set flag=0 expres=fail user=test 
if [[ $MODE == 32 ]]; then
+ setuid32 perm=uid_set flag=0 expres=success user=super
+ setuid32 perm=uid_set flag=0 expres=fail user=test 
fi

## SYSCALL:	setreuid()
## PURPOSE:
## Verify audit of attempts to set the real and effective user identity
## for a process.  The testcases below try to set the real and effective
## user id as the superuser and as a regular user.  The test procedure is
## as follows:
## 1a. If expres=success, execute the test process as the superuser and
##     attempt to set the real/effective user id to 0, verify the result.
## 1b. If expres=fail, execute the test process as a regular user and
##     attempt to set the real/effective user id to 0, verify the result.
##  2. Check the audit log for the correct syscall result
+ setreuid perm=uid_set flag=0 expres=success user=super
+ setreuid perm=uid_set flag=0 expres=fail user=test 
if [[ $MODE == 32 ]]; then
+ setreuid32 perm=uid_set flag=0 expres=success user=super
+ setreuid32 perm=uid_set flag=0 expres=fail user=test 
fi

## SYSCALL:	setresuid()
## PURPOSE:
## Verify audit of attempts to set the real, effective and saved user identity
## for a process.  The testcases below try to set the real, effective and saved
## user id as the superuser and as a regular user.  The test procedure is
## as follows:
## 1a. If expres=success, execute the test process as the superuser and
##     attempt to set the real/effective/saved user id to 0, verify the result.
## 1b. If expres=fail, execute the test process as a regular user and
##     attempt to set the real/effective/saved user id to 0, verify the result.
##  2. Check the audit log for the correct syscall result
+ setresuid perm=uid_set flag=0 expres=success user=super
+ setresuid perm=uid_set flag=0 expres=fail user=test 
if [[ $MODE == 32 ]]; then
+ setresuid32 perm=uid_set flag=0 expres=success user=super
+ setresuid32 perm=uid_set flag=0 expres=fail user=test 
fi

##
## TIME syscalls
##

## SYSCALL:	adjtimex()
## PURPOSE:
## Verify audit of attempts to tune the kernel clock. The testcases below try to
## tune the kernel clock both as the superuser and as a regular user.  The test
## procedure is as follows:
## 1a. If expres=success, execute the test process as the superuser, and attempt
##     to read kernel clock tunables, verify the result.
## 1b. If expres=fail, execute the test process as a regular user and 
##     attempt to tune the kernel clock using the mode specified
##     by the 'flag' variable, verify the result
##  2. Check the audit log for the correct syscall result
+ adjtimex perm=time_adjust expres=success user=super
+ adjtimex perm=time_adjust flag=singleshot expres=fail user=test 

## SYSCALL:	clock_settime()
## PURPOSE:
## Verify audit of attempts to set the system clock. The testcases below try to
## set the system clock both as the superuser and as a regular user.  The test
## procedure is as follows:
## 1a. If expres=success, execute the test process as the superuser, and attempt
##     to set the system clock, verify the result.
## 1b. If expres=fail, execute the test process as a regular user and 
##     attempt to set the system clock, verify the result.
##  2. Check the audit log for the correct syscall result
+ clock_settime perm=time_set expres=success user=super
+ clock_settime perm=time_set expres=fail user=test 

## SYSCALL:	settimeofday()
## PURPOSE:
## Verify audit of attempts to set the time and/or timezone. The testcases below
## try to set the time and timezone both as the superuser and as a regular user.
## The test procedure is as follows:
## 1a. If expres=success, execute the test process as the superuser, and attempt
##     to set the time, verify the result.
## 1b. If expres=fail, execute the test process as a regular user and 
##     attempt to set the time, verify the result.
##  2. Check the audit log for the correct syscall result
+ settimeofday perm=time_zone_set expres=success user=super \
  testfunc=test_su_time_zone
+ settimeofday perm=time_zone_set expres=fail user=test  \
  testfunc=test_su_time_zone

## SYSCALL:	stime()
## PURPOSE:
## Verify audit of attempts to set the time. The testcases below try to
## set the time both as the superuser and as a regular user.  The test
## procedure is as follows:
## 1a. If expres=success, execute the test process as the superuser, and attempt
##     to set the time, verify the result.
## 1b. If expres=fail, execute the test process as a regular user and 
##     attempt to set the time, verify the result.
##  2. Check the audit log for the correct syscall result
if [[ $MODE == 32 ]]; then
+ stime perm=time_set expres=success user=super
+ stime perm=time_set expres=fail user=test 
fi

##
## XATTR syscalls
##

## SYSCALL:	removexattr(), fremovexattr(), lremovexattr()
## PURPOSE:
## Verify that no one can remove security attributes on files.  There are two
## types of testcases in this set of tests.  The first tries, as the super user,
## to remove the security.selinux attribute from a file.  The second tries, as a
## regular user, to remove the security.selinux attribute from a file that the
## user does not own.  The test procedure is as follows:
##  1. Create a new file as the superuser.
## 2a. If user=super, execute the test process as the super user and attempt to
##     remove the security.selinux attribute from the file; verify the result.
## 2b. If user=test, execute the test process as the test user and attempt to
##     remove the security.selinux attribute from the file; verify the result.
##  3. Check the audit log for the correct syscall result
if [[ $PPROFILE == lspp ]]; then
+ fremovexattr perm=secattr_remove flag=security.selinux expres=fail user=super err=EACCES
+ lremovexattr perm=secattr_remove flag=security.selinux expres=fail user=super err=EACCES
+ removexattr perm=secattr_remove flag=security.selinux expres=fail user=super err=EACCES
+ fremovexattr perm=secattr_remove flag=security.selinux expres=fail user=test err=EACCES
+ lremovexattr perm=secattr_remove flag=security.selinux expres=fail user=test err=EACCES
+ removexattr perm=secattr_remove flag=security.selinux expres=fail user=test err=EACCES
fi

## SYSCALL:	setxattr(), fsetxattr(), lsetxattr()
## PURPOSE:
## Verify that regular users cannot modify the values of security attributes on
## files they do not own.  The testcases below try to modify the value of the
## security.selinux attribute on a file which is owned by the superuser.
## The test procedure is as follows:
##  1. Create a new file as the superuser.
##  2. As a regular user, attempt to modify the file's security.selinux
##     attribute, verify the result.
##  3. Check the audit log for the correct syscall result
if [[ $PPROFILE == lspp ]]; then
+ fsetxattr perm=secattr_set flag=security.selinux expres=fail user=test \
   testfunc=test_su_setxattr
+ lsetxattr perm=secattr_set flag=security.selinux expres=fail user=test \
   testfunc=test_su_setxattr
+ setxattr perm=secattr_set flag=security.selinux expres=fail user=test \
   testfunc=test_su_setxattr
fi
