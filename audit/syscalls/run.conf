# =============================================================================
# (c) Copyright Hewlett-Packard Development Company, L.P., 2005
# Written by Aron Griffis <aron@hp.com>
#
#   This program is free software;  you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY;  without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
#   the GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program;  if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# =============================================================================
# 
# Overview of run.conf
# --------------------
# This configuration file is a bash script that sourced by run.bash.  It
# primarily consists of a list of tests to run, but can also contain
# some variable and function settings.
# 
# The list of tests is built using two functions (+ and -) provided by
# run.bash.  To add a test to the list:
# 
#   + testname
# 
# Generally it's unnecessary in this file to remove tests from the list,
# but you can do so with:
# 
#   - testname
# 
# Variables
# ---------
# VARIATIONS (array)
# 
#     - by default, VARIATIONS=().  When + is called, the specified
#       test simply added to the list verbatim.
# 
#     - When VARIATIONS is defined, tests are added to the list
#       through a more complex process: for each variation in the
#       list, the make_variation function is called with "testname"
#       "variation", and it is expected to echo back a string which
#       fully describes the resulting test.  The default
#       make_variation function simply joins them with a separating
#       space.
# 
#     - The + function (as well as -) will add all variations by
#       default, but can accept a list of variations instead, for
#       example:
# 
#       VARIATIONS=( empty_input good_input bad_input huge_input )
# 
#       # huge_input doesn't apply to test1
#       + test1
#       - test1 huge_input
# 
#       # test2 doesn't take any input
#       + test2 empty_input
# 
# Functions
# ---------
# make_variation(testcase, variation)
# 
#     - default is: echo "$1 $2" (see run.bash)
# 
# run_test(testcase)
# 
#     - default is: eval "$1" (see run.bash)
# 
#     - run_test is called with only one argument, which is the result
#       of make_variation when the test list was built
# 
#     - if you override run_test, make sure to use eval in case $1
#       contains any quoted arguments
# 
#     - an example, following the VARIATIONS example above:
# 
#       function run_test {
#         declare input=${1##* }      # remove up to last space
#         set -- "${1% *}"            # remove last space and following
#         case $input in
#           empty_input) eval "tests/$1 </dev/null"; return $? ;;
#           good_input)  eval "tests/$1 <input/good"; return $? ;;
#           bad_input)   eval "tests/$1 <input/bad"; return $? ;;
#           huge_input)  eval "tests/$1 <input/huge"; return $? ;;
#           *) echo "Error: unknown variation"; return 2 ;;
#         esac
#       }
# 
# startup_hook()
#     
#     - default is: true (see run.bash)
# 
#     - can be defined to do any special setup required by your
#       tests.  Note this runs prior to looping through the tests,
#       not prior to each test.  If you need special setup prior to
#       running each test, put it in run_test
# 
# cleanup_hook()
# 
#     - default is: true (see run.bash)
# 
#     - runs after looping through all the tests

#----------------------------------------------------------------------
# Notes for syscalls' run.conf
# ----------------------------
# The two variations for each syscall tested are goodargs and badargs.
# These are interpreted in run_test to call ./syscalls either with -s
# or without.
#----------------------------------------------------------------------
VARIATIONS=( goodargs badargs )
function make_variation { printf "%-20s %s" "$1" "$2"; }
function run_test { 
    set -- "${1/%goodargs/ -s}"
    set -- "${1/%badargs/}"
    eval "./syscalls -t $1"
}

+ access
+ adjtimex
+ bind
+ capset
+ chdir
+ chmod
+ chown
if [[ $HOSTTYPE == !(ppc|x86_64|s390x|ia64) ]]; then
    + chown16
    + chown32
fi
+ clone
if [[ $HOSTTYPE == ia64 ]]; then
    + clone2
fi
+ creat
+ delete_module
+ execve
+ fchmod
+ fchown
if [[ $HOSTTYPE == !(ppc|x86_64|s390x|ia64) ]]; then
    + fchown16
    + fchown32
fi
+ fork
+ fremovexattr
+ fsetxattr
+ init_module
+ ioctl
if [[ $HOSTTYPE == i?86 ]]; then
    + ioperm
    + iopl
fi
+ lchown
if [[ $HOSTTYPE == !(ppc|x86_64|s390x|ia64) ]]; then
    + lchown16
    + lchown32
fi
+ link
+ lremovexattr
+ lsetxattr
+ mkdir
+ mknod
+ mount
+ msgctl
+ msgsnd
+ msgrcv
+ msgget
+ open
+ ptrace
+ removexattr
+ rename
+ rmdir
+ semctl
+ semget
+ semop
+ semtimedop
+ setfsgid
if [[ $HOSTTYPE == !(ppc|x86_64|s390x|ia64) ]]; then
    + setfsgid16
    + setfsgid32
fi
+ setfsuid
if [[ $HOSTTYPE == !(ppc|x86_64|s390x|ia64) ]]; then
    + setfsuid16
    + setfsuid32
fi
+ setgid
if [[ $HOSTTYPE == !(ppc|x86_64|s390x|ia64) ]]; then
    + setgid16
    + setgid32
fi
+ setgroups
if [[ $HOSTTYPE == !(ppc|x86_64|s390x|ia64) ]]; then
    + setgroups16
    + setgroups32
fi
+ setregid
if [[ $HOSTTYPE == !(ppc|x86_64|s390x|ia64) ]]; then
    + setregid16
    + setregid32
fi
+ setresgid
if [[ $HOSTTYPE == !(ppc|x86_64|s390x|ia64) ]]; then
    + setresgid16
    + setresgid32
fi
+ setresuid
if [[ $HOSTTYPE == !(ppc|x86_64|s390x|ia64) ]]; then
    + setresuid16
    + setresuid32
fi
+ setreuid
if [[ $HOSTTYPE == !(ppc|x86_64|s390x|ia64) ]]; then
    + setreuid16
    + setreuid32
fi
+ settimeofday
+ setuid
if [[ $HOSTTYPE == !(ppc|x86_64|s390x|ia64) ]]; then
    + setuid16
    + setuid32
fi
+ setxattr
+ shmat
+ shmctl
+ shmget
+ swapon
+ symlink
+ truncate
if [[ $HOSTTYPE == !(ppc|x86_64|s390x|ia64) ]]; then
    + truncate64
fi
+ umask
+ unlink
if [[ $HOSTTYPE != ia64 ]]; then
    + utime
    + utimes
    + vfork
fi
