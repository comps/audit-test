# =============================================================================
# (c) Copyright Hewlett-Packard Development Company, L.P., 2005
#
#   This program is free software;  you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY;  without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
#   the GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program;  if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# =============================================================================

#----------------------------------------------------------------------
# Notes for syscalls' run.conf
# ----------------------------
# The two variations for each syscall tested are basic-good and basic-bad.
# These are interpreted to call ./syscalls either with -s or without.
#----------------------------------------------------------------------
function run_test { 
    declare status test=$1
    shift

    # Force the audit log to rotate; add our rule.
    rotate_audit_logs || return 2
    set -x
    auditctl -a entry,always ${MODE:+-F arch=b$MODE} -S ${test%%-*} || return 2

    # Run the test
    ./syscalls -t "$test" "$@"
    status=$?

    # Remove the rule we added
    auditctl -d entry,always ${MODE:+-F arch=b$MODE} -S ${test%%-*}
    set +x

    # Display the log items
    if [[ $status != 0 ]]; then
        echo
        echo augrok output
        echo -------------
        augrok type!=DAEMON_ROTATE
    fi

    return $status
}

# alias new+ to the existing + function, then replace +
# with a backward compatible function to handle the old variations.
eval "function new+ $(type + | sed '1,2d')"
function + {
    declare test=$1
    shift
    [[ -n $1 ]] || set -- basic-good basic-bad
    while [[ -n $1 ]]; do
        case $1 in
            *-good) new+ $test -v ${1%%-*} -s ;;
            *-bad)  new+ $test -v ${1%%-*} ;;
            *) die "sorry, I don't understand + $*" ;;
        esac
        shift
    done
}

+ setfsgid modify-good nomodify-good
if [[ $MODE == 32 ]]; then
    + setfsgid32 modify-good nomodify-good
fi
+ setfsuid modify-good nomodify-good
if [[ $MODE == 32 ]]; then
    + setfsuid32 modify-good nomodify-good
fi
