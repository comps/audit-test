/**********************************************************************
 **   Copyright (C) International Business Machines  Corp., 2003
 **
 **   This program is free software;  you can redistribute it and/or modify
 **   it under the terms of the GNU General Public License as published by
 **   the Free Software Foundation; either version 2 of the License, or
 **   (at your option) any later version.
 **
 **   This program is distributed in the hope that it will be useful,
 **   but WITHOUT ANY WARRANTY;  without even the implied warranty of
 **   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
 **   the GNU General Public License for more details.
 **
 **   You should have received a copy of the GNU General Public License
 **   along with this program;  if not, write to the Free Software
 **   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 **
 **
 **
 **  FILE       : test_[testname].c
 **
 **  PURPOSE    : To test the [testname] library call auditing.
 **
 **  DESCRIPTION: The test_[testname]() function builds into the
 **  laus_test framework to verify that the Linux Audit System
 **  accurately logs both successful and erroneous execution of the
 **  "[testname]" system call.
 **
 **  In the successful case, this function:
 **   1) 
 **   2) 
 **   3) ... 
 **
 **  The successful case ...
 **  
 **  In the erroneous case, this function:
 **   1) 
 **   2) 
 **   3) ...
 **      
 **  The erroneous case ...
 **
 **  HISTORY    :
 **    mm/yy Originated by [name] <[email]>
 **
 **********************************************************************/

#include "../../include/syscalls.h"

int test_[testname](struct audit_data* context) {
  
  int rc = 0;
  int exp_errno = [expected_errno];
  
  // Set the syscall-specific data
  printf5( "Setting u.syscall.sysnum to %d\n", AUDIT_[testname] );
  context->u.syscall.sysnum = AUDIT_[testname];
  
  /**
   * Do as much setup work as possible right here
   */
  if( context->success) {
    // Set up for success
    // Might include: context->euid = 0; context->egid = 0;
  } else {
    // Set up for error
  }

  // Set up audit argument buffer
  if( rc = auditArg1( context, AUDIT_ARG_[datatype], sizeof( [type] ), [pointer] ) != 0 ) {
    printf1( "Error setting up audit argument buffer\n" );
    goto EXIT;
  }

  // Do pre-system call work
  preSysCall( context );

  // Execute system call
  context->u.syscall.exit = syscall( __NR_[testname], [params] );

  // Do post-system call work
  postSysCall( context, errno, -1, exp_errno );

 EXIT_CLEANUP:
  /**
   * Do cleanup work here
   */
  if( context->success) {
    // Clean up from success case setup
  }

 EXIT:
  printf5( "Returning from test\n" );
  return rc;
}
