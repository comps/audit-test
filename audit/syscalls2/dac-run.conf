#!/bin/bash
# =============================================================================
# (c) Copyright Hewlett-Packard Development Company, L.P., 2007
#
#   This program is free software;  you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY;  without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
#   the GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program;  if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# =============================================================================

function create_fs_objects_dac {
    declare p=$1 base all="a+rwx"

    case $p in

        # changes to files/dirs (tested object is always the target)
        file_read)
            create_file target mode="${owner:0:1}+r"
            name=$target;;
        file_write)
            create_file target mode="${owner:0:1}+rw"
            name=$target;;
        file_exec)
            create_exec target mode="${owner:0:1}+rx"
            name=$target;;
        symlink_read)
            create_symlink target mode="${owner:0:1}+r"
            name=$target ;;
	priv_modify)
	    create_file target mode=$all
	    name=$target ;;

        # changes to directory entries
        dir_add_name)
            create_dir base mode="${owner:0:1}+rwx"
            target="$base/new"

            name="$base/" # audit adds a trailing /
	    [[ $tag == *fail* ]]  && augrokfunc=augrok_default

	    if [[ -n $which ]]; then
		create_dir base mode=$all
		create_file source basedir=$base mode=$all
	    fi ;;
        dir_remove_name)
            create_dir base mode="${owner:0:1}+rwx"
            case $entry in
		dir)  create_dir target basedir=$base mode=$all ;;
		file) create_file target basedir=$base mode=$all ;;
            esac

	    # see above comment regarding directory write tests
            name="$base/" # audit adds a trailing /
	    /bin/su - $TEST_USER -c "ls $base >/dev/null" || \
		augrokfunc=augrok_default

            # for syscalls that operate on more than one pathname
            # determine which is the actual test object
            case $which in
                old)
		    source=$target
		    create_dir base mode=$all
		    create_file target basedir=$base mode=$all ;;
                new)
		    create_dir base mode=$all
		    create_file source basedir=$base mode=$all ;;
            esac
            ;;

        *) exit_error "unknown perm to test: $p" ;;
    esac

    # special handling for *at syscalls
    if [[ -n $at ]]; then
	dirname=$target
	while [[ $dirname == /*/* ]]; do dirname=${dirname%/*}; done
	[[ -n $source ]] && source=${source#/*/}
	target=${target#/*/}
	name=${name#/*/}
    fi

    # augrok setup
    [[ -z $augrokfunc ]] && augrokfunc=augrok_name
    [[ $syscall == f* ]] && augrokfunc=augrok_default
}

function test_dac_default {
    # use $tag instead of $expres to work around the cases
    # where a success is an expected failure.
    if [[ $tag == *success* ]]; then
	read testres exitval pid \
	    <<<"$(do_$syscall $op $dirname $source $target $flag)"
    else
	# use single quotes so $$ doesn't expand early
	read uid euid suid fsuid gid egid sgid fsgid \
	    <<<"$(/bin/su - $TEST_USER -c 'ps --no-headers -p $$ -o uid,euid,suid,fsuid,gid,egid,sgid,fsgid')"
	read testres exitval pid \
	    <<<"$(/bin/su - $TEST_USER -c "$(which do_$syscall) $op $dirname $source $target $flag")"
    fi
}

##
## FS syscalls
##

## SYSCALL:	fchmod()
+ fchmod perm=priv_modify flag=777 expres=success owner=user
+ fchmod perm=priv_modify flag=777 expres=fail owner=user err=EPERM

## SYSCALL:	fchmodat()
+ fchmodat perm=priv_modify at=1 flag=777 expres=success owner=user
+ fchmodat perm=priv_modify at=1 flag=777 expres=fail owner=user err=EPERM

## SYSCALL:	fchown()
+ fchown perm=priv_modify flag=root expres=success owner=user
+ fchown perm=priv_modify flag=root expres=fail owner=user err=EPERM
if [[ $MODE == 32 ]]; then
    + fchown32 perm=priv_modify flag=root expres=success owner=user
    + fchown32 perm=priv_modify flag=root expres=fail owner=user err=EPERM
fi

## SYSCALL:	fchownat()
+ fchownat perm=priv_modify at=1 flag=root expres=success owner=user
+ fchownat perm=priv_modify at=1 flag=root expres=fail owner=user err=EPERM

## SYSCALL:	linkat()
+ linkat perm=dir_add_name at=1 which=new expres=success owner=user
+ linkat perm=dir_add_name at=1 which=new expres=fail owner=user err=EACCES

## SYSCALL:	mkdirat()
+ mkdirat perm=dir_add_name at=1 expres=success owner=user
+ mkdirat perm=dir_add_name at=1 expres=fail owner=user err=EACCES

## SYSCALL:	mknodat()
+ mknodat perm=dir_add_name at=1 expres=success owner=user
+ mknodat perm=dir_add_name at=1 expres=fail owner=user err=EACCES

## SYSCALL:	openat()
+ openat perm=dir_add_name at=1 flag=create expres=success owner=user
+ openat perm=dir_add_name at=1 flag=create expres=fail owner=user err=EACCES
+ openat perm=file_read at=1 flag=read expres=success owner=user
+ openat perm=file_read at=1 flag=read expres=fail owner=user err=EACCES
+ openat perm=file_write at=1 flag=write expres=success owner=user
+ openat perm=file_write at=1 flag=write expres=fail owner=user err=EACCES

## SYSCALL:	readlinkat()
+ readlinkat perm=symlink_read at=1 expres=success owner=user
+ readlinkat perm=symlink_read at=1 expres=fail owner=user err=EACCES

## SYSCALL:	renameat()
+ renameat perm=dir_remove_name at=1 entry=file which=old expres=success owner=user \
  tag=renameat__dir_remove_name_old_success_owner
+ renameat perm=dir_remove_name at=1 entry=file which=old expres=fail owner=user \
  err=EACCES tag=renameat__dir_remove_name_old_fail_owner
+ renameat perm=dir_add_name at=1 which=new expres=success owner=user
+ renameat perm=dir_add_name at=1 which=new expres=fail owner=user err=EACCES
+ renameat perm=dir_remove_name at=1 entry=file which=new expres=success owner=user \
  tag=renameat__dir_remove_name_new_success_owner
+ renameat perm=dir_remove_name at=1 entry=file which=new expres=fail owner=user \
  err=EACCES tag=renameat__dir_remove_name_new_fail_owner

## SYSCALL:	symlinkat()
+ symlinkat perm=dir_add_name at=1 which=new expres=success owner=user
+ symlinkat perm=dir_add_name at=1 which=new expres=fail owner=user err=EACCES

## SYSCALL:	unlinkat()
+ unlinkat perm=dir_remove_name at=1 entry=file expres=success owner=user
+ unlinkat perm=dir_remove_name at=1 entry=file expres=fail owner=user err=EACCES

## SYSCALL:	uselib()
if [[ $HOSTTYPE != x86_64 ]]; then
+ uselib perm=file_exec expres=fail owner=user err=ENOEXEC \
  tag=uselib__file_exec_success_user
+ uselib perm=file_exec expres=fail owner=user err=EACCES
fi
